// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * TransactionV0's original definition in the XDR file is:
 * ```
 * struct TransactionV0
{
uint256 sourceAccountEd25519;
uint32 fee;
SequenceNumber seqNum;
TimeBounds* timeBounds;
Memo memo;
Operation operations<MAX_OPS_PER_TX>;
union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class TransactionV0(
    val sourceAccountEd25519: Uint256,
    val fee: Uint32,
    val seqNum: SequenceNumber,
    val timeBounds: TimeBounds?,
    val memo: Memo,
    val operations: List<Operation>,
    val ext: TransactionV0Ext,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        sourceAccountEd25519.encode(stream)
        fee.encode(stream)
        seqNum.encode(stream)
        if (timeBounds != null) {
            stream.writeInt(1)
            timeBounds.encode(stream)
        } else {
            stream.writeInt(0)
        }
        memo.encode(stream)
        val operationsSize = operations.size
        stream.writeInt(operationsSize)
        operations.encodeXdrElements(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<TransactionV0> {
        override fun decode(stream: XdrInputStream): TransactionV0 {
            val sourceAccountEd25519 = Uint256.decode(stream)
            val fee = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val seqNum = SequenceNumber.decode(stream)
            val timeBoundsPresent = stream.readInt()
            val timeBounds = if (timeBoundsPresent != 0) {
                TimeBounds.decode(stream)
            } else {
                null
            }
            val memo = Memo.decode(stream)
            val operationsSize = stream.readInt()
            val operations: List<Operation> = decodeXdrElementsList(operationsSize, stream, Operation.decoder())
            val ext = TransactionV0Ext.decode(stream)
            return TransactionV0(
                sourceAccountEd25519,
                fee,
                seqNum,
                timeBounds,
                memo,
                operations,
                ext,
            )
        }
    }

    /**
     * TransactionV0Ext's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class TransactionV0Ext(val type: Int) : XdrElement {
        data object TransactionV0ExtV0 : TransactionV0Ext(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<TransactionV0Ext> {
            override fun decode(stream: XdrInputStream): TransactionV0Ext {
                return when (val type = Int.decode(stream)) {
                    0 -> TransactionV0ExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
