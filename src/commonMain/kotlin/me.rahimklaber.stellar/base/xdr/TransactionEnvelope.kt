// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * TransactionEnvelope's original definition in the XDR file is:
 * ```
 * union TransactionEnvelope switch (EnvelopeType type)
{
case ENVELOPE_TYPE_TX_V0:
TransactionV0Envelope v0;
case ENVELOPE_TYPE_TX:
TransactionV1Envelope v1;
case ENVELOPE_TYPE_TX_FEE_BUMP:
FeeBumpTransactionEnvelope feeBump;
};
 * ```
 */
sealed class TransactionEnvelope(val type: EnvelopeType) : XdrElement {
    fun v0OrNull(): TxV0? = if (this is TxV0) this else null
    data class TxV0(
        val v0: TransactionV0Envelope,
    ) : TransactionEnvelope(EnvelopeType.ENVELOPE_TYPE_TX_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v0.encode(stream)
        }
    }

    fun v1OrNull(): Tx? = if (this is Tx) this else null
    data class Tx(
        val v1: TransactionV1Envelope,
    ) : TransactionEnvelope(EnvelopeType.ENVELOPE_TYPE_TX) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v1.encode(stream)
        }
    }

    fun feeBumpOrNull(): TxFeeBump? = if (this is TxFeeBump) this else null
    data class TxFeeBump(
        val feeBump: FeeBumpTransactionEnvelope,
    ) : TransactionEnvelope(EnvelopeType.ENVELOPE_TYPE_TX_FEE_BUMP) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            feeBump.encode(stream)
        }
    }

    companion object : XdrElementDecoder<TransactionEnvelope> {
        override fun decode(stream: XdrInputStream): TransactionEnvelope {
            return when (val type = EnvelopeType.decode(stream)) {
                EnvelopeType.ENVELOPE_TYPE_TX_V0 -> {
                    val v0 = TransactionV0Envelope.decode(stream)
                    TxV0(v0)
                }

                EnvelopeType.ENVELOPE_TYPE_TX -> {
                    val v1 = TransactionV1Envelope.decode(stream)
                    Tx(v1)
                }

                EnvelopeType.ENVELOPE_TYPE_TX_FEE_BUMP -> {
                    val feeBump = FeeBumpTransactionEnvelope.decode(stream)
                    TxFeeBump(feeBump)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
