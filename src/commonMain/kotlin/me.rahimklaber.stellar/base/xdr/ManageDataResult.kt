// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ManageDataResult's original definition in the XDR file is:
 * ```
 * union ManageDataResult switch (ManageDataResultCode code)
{
case MANAGE_DATA_SUCCESS:
void;
case MANAGE_DATA_NOT_SUPPORTED_YET:
case MANAGE_DATA_NAME_NOT_FOUND:
case MANAGE_DATA_LOW_RESERVE:
case MANAGE_DATA_INVALID_NAME:
void;
};
 * ```
 */
sealed class ManageDataResult(val type: ManageDataResultCode) : XdrElement {
    data object ManageDataSuccess : ManageDataResult(ManageDataResultCode.MANAGE_DATA_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ManageDataNotSupportedYet : ManageDataResult(ManageDataResultCode.MANAGE_DATA_NOT_SUPPORTED_YET) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ManageDataNameNotFound : ManageDataResult(ManageDataResultCode.MANAGE_DATA_NAME_NOT_FOUND) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ManageDataLowReserve : ManageDataResult(ManageDataResultCode.MANAGE_DATA_LOW_RESERVE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ManageDataInvalidName : ManageDataResult(ManageDataResultCode.MANAGE_DATA_INVALID_NAME) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<ManageDataResult> {
        override fun decode(stream: XdrInputStream): ManageDataResult {
            return when (val type = ManageDataResultCode.decode(stream)) {
                ManageDataResultCode.MANAGE_DATA_SUCCESS -> ManageDataSuccess
                ManageDataResultCode.MANAGE_DATA_NOT_SUPPORTED_YET -> ManageDataNotSupportedYet
                ManageDataResultCode.MANAGE_DATA_NAME_NOT_FOUND -> ManageDataNameNotFound
                ManageDataResultCode.MANAGE_DATA_LOW_RESERVE -> ManageDataLowReserve
                ManageDataResultCode.MANAGE_DATA_INVALID_NAME -> ManageDataInvalidName
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
