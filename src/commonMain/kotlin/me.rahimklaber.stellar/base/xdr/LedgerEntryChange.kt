// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LedgerEntryChange's original definition in the XDR file is:
 * ```
 * union LedgerEntryChange switch (LedgerEntryChangeType type)
{
case LEDGER_ENTRY_CREATED:
LedgerEntry created;
case LEDGER_ENTRY_UPDATED:
LedgerEntry updated;
case LEDGER_ENTRY_REMOVED:
LedgerKey removed;
case LEDGER_ENTRY_STATE:
LedgerEntry state;
};
 * ```
 */
sealed class LedgerEntryChange(val type: LedgerEntryChangeType) : XdrElement {
    fun createdOrNull(): LedgerEntryCreated? = if (this is LedgerEntryCreated) this else null
    data class LedgerEntryCreated(
        val created: LedgerEntry,
    ) : LedgerEntryChange(LedgerEntryChangeType.LEDGER_ENTRY_CREATED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            created.encode(stream)
        }
    }

    fun updatedOrNull(): LedgerEntryUpdated? = if (this is LedgerEntryUpdated) this else null
    data class LedgerEntryUpdated(
        val updated: LedgerEntry,
    ) : LedgerEntryChange(LedgerEntryChangeType.LEDGER_ENTRY_UPDATED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            updated.encode(stream)
        }
    }

    fun removedOrNull(): LedgerEntryRemoved? = if (this is LedgerEntryRemoved) this else null
    data class LedgerEntryRemoved(
        val removed: LedgerKey,
    ) : LedgerEntryChange(LedgerEntryChangeType.LEDGER_ENTRY_REMOVED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            removed.encode(stream)
        }
    }

    fun stateOrNull(): LedgerEntryState? = if (this is LedgerEntryState) this else null
    data class LedgerEntryState(
        val state: LedgerEntry,
    ) : LedgerEntryChange(LedgerEntryChangeType.LEDGER_ENTRY_STATE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            state.encode(stream)
        }
    }

    companion object : XdrElementDecoder<LedgerEntryChange> {
        override fun decode(stream: XdrInputStream): LedgerEntryChange {
            return when (val type = LedgerEntryChangeType.decode(stream)) {
                LedgerEntryChangeType.LEDGER_ENTRY_CREATED -> {
                    val created = LedgerEntry.decode(stream)
                    LedgerEntryCreated(created)
                }

                LedgerEntryChangeType.LEDGER_ENTRY_UPDATED -> {
                    val updated = LedgerEntry.decode(stream)
                    LedgerEntryUpdated(updated)
                }

                LedgerEntryChangeType.LEDGER_ENTRY_REMOVED -> {
                    val removed = LedgerKey.decode(stream)
                    LedgerEntryRemoved(removed)
                }

                LedgerEntryChangeType.LEDGER_ENTRY_STATE -> {
                    val state = LedgerEntry.decode(stream)
                    LedgerEntryState(state)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
