// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * AccountEntryExtensionV2's original definition in the XDR file is:
 * ```
 * struct AccountEntryExtensionV2
{
uint32 numSponsored;
uint32 numSponsoring;
SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;

union switch (int v)
{
case 0:
void;
case 3:
AccountEntryExtensionV3 v3;
}
ext;
};
 * ```
 */
data class AccountEntryExtensionV2(
    val numSponsored: Uint32,
    val numSponsoring: Uint32,
    val signerSponsoringIDs: List<SponsorshipDescriptor>,
    val ext: AccountEntryExtensionV2Ext,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        numSponsored.encode(stream)
        numSponsoring.encode(stream)
        val signerSponsoringIDsSize = signerSponsoringIDs.size
        stream.writeInt(signerSponsoringIDsSize)
        signerSponsoringIDs.encodeXdrElements(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<AccountEntryExtensionV2> {
        override fun decode(stream: XdrInputStream): AccountEntryExtensionV2 {
            val numSponsored = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val numSponsoring = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val signerSponsoringIDsSize = stream.readInt()
            val signerSponsoringIDs: List<SponsorshipDescriptor> =
                decodeXdrElementsList(signerSponsoringIDsSize, stream, SponsorshipDescriptor.decoder())
            val ext = AccountEntryExtensionV2Ext.decode(stream)
            return AccountEntryExtensionV2(
                numSponsored,
                numSponsoring,
                signerSponsoringIDs,
                ext,
            )
        }
    }

    /**
     * AccountEntryExtensionV2Ext's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    case 3:
    AccountEntryExtensionV3 v3;
    }
     * ```
     */
    sealed class AccountEntryExtensionV2Ext(val type: Int) : XdrElement {
        data object AccountEntryExtensionV2ExtV0 : AccountEntryExtensionV2Ext(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun v3OrNull(): AccountEntryExtensionV2ExtV3? = if (this is AccountEntryExtensionV2ExtV3) this else null
        data class AccountEntryExtensionV2ExtV3(
            val v3: AccountEntryExtensionV3,
        ) : AccountEntryExtensionV2Ext(3) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                v3.encode(stream)
            }
        }

        companion object : XdrElementDecoder<AccountEntryExtensionV2Ext> {
            override fun decode(stream: XdrInputStream): AccountEntryExtensionV2Ext {
                return when (val type = Int.decode(stream)) {
                    0 -> AccountEntryExtensionV2ExtV0
                    3 -> {
                        val v3 = AccountEntryExtensionV3.decode(stream)
                        AccountEntryExtensionV2ExtV3(v3)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
