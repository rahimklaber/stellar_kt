// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LiquidityPoolWithdrawOp's original definition in the XDR file is:
 * ```
 * struct LiquidityPoolWithdrawOp
{
PoolID liquidityPoolID;
int64 amount;     // amount of pool shares to withdraw
int64 minAmountA; // minimum amount of first asset to withdraw
int64 minAmountB; // minimum amount of second asset to withdraw
};
 * ```
 */
data class LiquidityPoolWithdrawOp(
    val liquidityPoolID: PoolID,
    val amount: Int64,
    val minAmountA: Int64,
    val minAmountB: Int64,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        liquidityPoolID.encode(stream)
        amount.encode(stream)
        minAmountA.encode(stream)
        minAmountB.encode(stream)
    }

    companion object : XdrElementDecoder<LiquidityPoolWithdrawOp> {
        override fun decode(stream: XdrInputStream): LiquidityPoolWithdrawOp {
            val liquidityPoolID = PoolID.decode(stream)
            val amount = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val minAmountA = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val minAmountB = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            return LiquidityPoolWithdrawOp(
                liquidityPoolID,
                amount,
                minAmountA,
                minAmountB,
            )
        }
    }
}
