// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCContractInstance's original definition in the XDR file is:
 * ```
 * struct SCContractInstance {
ContractExecutable executable;
SCMap* storage;
};
 * ```
 */
data class SCContractInstance(
    val executable: ContractExecutable,
    val storage: SCMap?,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        executable.encode(stream)
        if (storage != null) {
            stream.writeInt(1)
            storage.encode(stream)
        } else {
            stream.writeInt(0)
        }
    }

    companion object : XdrElementDecoder<SCContractInstance> {
        override fun decode(stream: XdrInputStream): SCContractInstance {
            val executable = ContractExecutable.decode(stream)
            val storagePresent = stream.readInt()
            val storage = if (storagePresent != 0) {
                SCMap.decode(stream)
            } else {
                null
            }
            return SCContractInstance(
                executable,
                storage,
            )
        }
    }
}
