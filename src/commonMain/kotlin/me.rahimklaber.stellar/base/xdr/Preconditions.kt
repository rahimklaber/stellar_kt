// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * Preconditions's original definition in the XDR file is:
 * ```
 * union Preconditions switch (PreconditionType type)
{
case PRECOND_NONE:
void;
case PRECOND_TIME:
TimeBounds timeBounds;
case PRECOND_V2:
PreconditionsV2 v2;
};
 * ```
 */
sealed class Preconditions(val type: PreconditionType) : XdrElement {
    data object PrecondNone : Preconditions(PreconditionType.PRECOND_NONE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    fun timeBoundsOrNull(): PrecondTime? = if (this is PrecondTime) this else null
    data class PrecondTime(
        val timeBounds: TimeBounds,
    ) : Preconditions(PreconditionType.PRECOND_TIME) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            timeBounds.encode(stream)
        }
    }

    fun v2OrNull(): PrecondV2? = if (this is PrecondV2) this else null
    data class PrecondV2(
        val v2: PreconditionsV2,
    ) : Preconditions(PreconditionType.PRECOND_V2) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v2.encode(stream)
        }
    }

    companion object : XdrElementDecoder<Preconditions> {
        override fun decode(stream: XdrInputStream): Preconditions {
            return when (val type = PreconditionType.decode(stream)) {
                PreconditionType.PRECOND_NONE -> PrecondNone
                PreconditionType.PRECOND_TIME -> {
                    val timeBounds = TimeBounds.decode(stream)
                    PrecondTime(timeBounds)
                }

                PreconditionType.PRECOND_V2 -> {
                    val v2 = PreconditionsV2.decode(stream)
                    PrecondV2(v2)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
