// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * BucketMetadata's original definition in the XDR file is:
 * ```
 * struct BucketMetadata
{
// Indicates the protocol version used to create / merge this bucket.
uint32 ledgerVersion;

// reserved for future use
union switch (int v)
{
case 0:
void;
case 1:
BucketListType bucketListType;
}
ext;
};
 * ```
 */
data class BucketMetadata(
    val ledgerVersion: Uint32,
    val ext: BucketMetadataExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ledgerVersion.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<BucketMetadata> {
        override fun decode(stream: XdrInputStream): BucketMetadata {
            val ledgerVersion = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val ext = BucketMetadataExt.decode(stream)
            return BucketMetadata(
                ledgerVersion,
                ext,
            )
        }
    }

    /**
     * BucketMetadataExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    case 1:
    BucketListType bucketListType;
    }
     * ```
     */
    sealed class BucketMetadataExt(val type: Int) : XdrElement {
        data object BucketMetadataExtV0 : BucketMetadataExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun bucketListTypeOrNull(): BucketMetadataExtV1? = if (this is BucketMetadataExtV1) this else null
        data class BucketMetadataExtV1(
            val bucketListType: BucketListType,
        ) : BucketMetadataExt(1) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                bucketListType.encode(stream)
            }
        }

        companion object : XdrElementDecoder<BucketMetadataExt> {
            override fun decode(stream: XdrInputStream): BucketMetadataExt {
                return when (val type = Int.decode(stream)) {
                    0 -> BucketMetadataExtV0
                    1 -> {
                        val bucketListType = BucketListType.decode(stream)
                        BucketMetadataExtV1(bucketListType)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
