// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ClaimPredicate's original definition in the XDR file is:
 * ```
 * union ClaimPredicate switch (ClaimPredicateType type)
{
case CLAIM_PREDICATE_UNCONDITIONAL:
void;
case CLAIM_PREDICATE_AND:
ClaimPredicate andPredicates<2>;
case CLAIM_PREDICATE_OR:
ClaimPredicate orPredicates<2>;
case CLAIM_PREDICATE_NOT:
ClaimPredicate* notPredicate;
case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
int64 absBefore; // Predicate will be true if closeTime < absBefore
case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
int64 relBefore; // Seconds since closeTime of the ledger in which the
// ClaimableBalanceEntry was created
};
 * ```
 */
sealed class ClaimPredicate(val type: ClaimPredicateType) : XdrElement {
    data object Unconditional : ClaimPredicate(ClaimPredicateType.CLAIM_PREDICATE_UNCONDITIONAL) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    fun andPredicatesOrNull(): And? = if (this is And) this else null
    data class And(
        val andPredicates: List<ClaimPredicate>,
    ) : ClaimPredicate(ClaimPredicateType.CLAIM_PREDICATE_AND) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            val andPredicatesSize = andPredicates.size
            stream.writeInt(andPredicatesSize)
            andPredicates.encodeXdrElements(stream)
        }
    }

    fun orPredicatesOrNull(): Or? = if (this is Or) this else null
    data class Or(
        val orPredicates: List<ClaimPredicate>,
    ) : ClaimPredicate(ClaimPredicateType.CLAIM_PREDICATE_OR) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            val orPredicatesSize = orPredicates.size
            stream.writeInt(orPredicatesSize)
            orPredicates.encodeXdrElements(stream)
        }
    }

    fun notPredicateOrNull(): Not? = if (this is Not) this else null
    data class Not(
        val notPredicate: ClaimPredicate?,
    ) : ClaimPredicate(ClaimPredicateType.CLAIM_PREDICATE_NOT) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            if (notPredicate != null) {
                stream.writeInt(1)
                notPredicate.encode(stream)
            } else {
                stream.writeInt(0)
            }
        }
    }

    fun absBeforeOrNull(): BeforeAbsoluteTime? = if (this is BeforeAbsoluteTime) this else null
    data class BeforeAbsoluteTime(
        val absBefore: Int64,
    ) : ClaimPredicate(ClaimPredicateType.CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            absBefore.encode(stream)
        }
    }

    fun relBeforeOrNull(): BeforeRelativeTime? = if (this is BeforeRelativeTime) this else null
    data class BeforeRelativeTime(
        val relBefore: Int64,
    ) : ClaimPredicate(ClaimPredicateType.CLAIM_PREDICATE_BEFORE_RELATIVE_TIME) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            relBefore.encode(stream)
        }
    }

    companion object : XdrElementDecoder<ClaimPredicate> {
        override fun decode(stream: XdrInputStream): ClaimPredicate {
            return when (val type = ClaimPredicateType.decode(stream)) {
                ClaimPredicateType.CLAIM_PREDICATE_UNCONDITIONAL -> Unconditional
                ClaimPredicateType.CLAIM_PREDICATE_AND -> {
                    val andPredicatesSize = stream.readInt()
                    val andPredicates: List<ClaimPredicate> = decodeXdrElementsList(andPredicatesSize, stream, ClaimPredicate.decoder())
                    And(andPredicates)
                }

                ClaimPredicateType.CLAIM_PREDICATE_OR -> {
                    val orPredicatesSize = stream.readInt()
                    val orPredicates: List<ClaimPredicate> = decodeXdrElementsList(orPredicatesSize, stream, ClaimPredicate.decoder())
                    Or(orPredicates)
                }

                ClaimPredicateType.CLAIM_PREDICATE_NOT -> {
                    val notPredicatePresent = stream.readInt()
                    val notPredicate = if (notPredicatePresent != 0) {
                        decode(stream)
                    } else {
                        null
                    }
                    Not(notPredicate)
                }

                ClaimPredicateType.CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME -> {
                    val absBefore = Int64.decode(stream)
                    BeforeAbsoluteTime(absBefore)
                }

                ClaimPredicateType.CLAIM_PREDICATE_BEFORE_RELATIVE_TIME -> {
                    val relBefore = Int64.decode(stream)
                    BeforeRelativeTime(relBefore)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
