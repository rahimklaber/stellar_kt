// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * PathPaymentStrictSendResult's original definition in the XDR file is:
 * ```
 * union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)
{
case PATH_PAYMENT_STRICT_SEND_SUCCESS:
struct
{
ClaimAtom offers<>;
SimplePaymentResult last;
} success;
case PATH_PAYMENT_STRICT_SEND_MALFORMED:
case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:
case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:
case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:
case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:
case PATH_PAYMENT_STRICT_SEND_NO_TRUST:
case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:
case PATH_PAYMENT_STRICT_SEND_LINE_FULL:
void;
case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:
Asset noIssuer; // the asset that caused the error
case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:
case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:
case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:
void;
};
 * ```
 */
sealed class PathPaymentStrictSendResult(val type: PathPaymentStrictSendResultCode) : XdrElement {
    fun successOrNull(): PathPaymentStrictSendSuccess? = if (this is PathPaymentStrictSendSuccess) this else null
    data class PathPaymentStrictSendSuccess(
        val success: PathPaymentStrictSendResultSuccess,
    ) : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            success.encode(stream)
        }
    }

    data object PathPaymentStrictSendMalformed : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendUnderfunded : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_UNDERFUNDED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendSrcNoTrust : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendSrcNotAuthorized :
        PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendNoDestination :
        PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NO_DESTINATION) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendNoTrust : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendNotAuthorized :
        PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendLineFull : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_LINE_FULL) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    fun noIssuerOrNull(): PathPaymentStrictSendNoIssuer? = if (this is PathPaymentStrictSendNoIssuer) this else null
    data class PathPaymentStrictSendNoIssuer(
        val noIssuer: Asset,
    ) : PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NO_ISSUER) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            noIssuer.encode(stream)
        }
    }

    data object PathPaymentStrictSendTooFewOffers :
        PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendOfferCrossSelf :
        PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictSendUnderDestmin :
        PathPaymentStrictSendResult(PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<PathPaymentStrictSendResult> {
        override fun decode(stream: XdrInputStream): PathPaymentStrictSendResult {
            return when (val type = PathPaymentStrictSendResultCode.decode(stream)) {
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_SUCCESS -> {
                    val success = PathPaymentStrictSendResultSuccess.decode(stream)
                    PathPaymentStrictSendSuccess(success)
                }

                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_MALFORMED -> PathPaymentStrictSendMalformed
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_UNDERFUNDED -> PathPaymentStrictSendUnderfunded
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST -> PathPaymentStrictSendSrcNoTrust
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED -> PathPaymentStrictSendSrcNotAuthorized
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NO_DESTINATION -> PathPaymentStrictSendNoDestination
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NO_TRUST -> PathPaymentStrictSendNoTrust
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED -> PathPaymentStrictSendNotAuthorized
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_LINE_FULL -> PathPaymentStrictSendLineFull
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_NO_ISSUER -> {
                    val noIssuer = Asset.decode(stream)
                    PathPaymentStrictSendNoIssuer(noIssuer)
                }

                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS -> PathPaymentStrictSendTooFewOffers
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF -> PathPaymentStrictSendOfferCrossSelf
                PathPaymentStrictSendResultCode.PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN -> PathPaymentStrictSendUnderDestmin
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * PathPaymentStrictSendResultSuccess's original definition in the XDR file is:
     * ```
     * struct
    {
    ClaimAtom offers<>;
    SimplePaymentResult last;
    }
     * ```
     */
    data class PathPaymentStrictSendResultSuccess(
        val offers: List<ClaimAtom>,
        val last: SimplePaymentResult,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            val offersSize = offers.size
            stream.writeInt(offersSize)
            offers.encodeXdrElements(stream)
            last.encode(stream)
        }

        companion object : XdrElementDecoder<PathPaymentStrictSendResultSuccess> {
            override fun decode(stream: XdrInputStream): PathPaymentStrictSendResultSuccess {
                val offersSize = stream.readInt()
                val offers: List<ClaimAtom> = decodeXdrElementsList(offersSize, stream, ClaimAtom.decoder())
                val last = SimplePaymentResult.decode(stream)
                return PathPaymentStrictSendResultSuccess(
                    offers,
                    last,
                )
            }
        }

    }
}
