// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LedgerHeaderHistoryEntry's original definition in the XDR file is:
 * ```
 * struct LedgerHeaderHistoryEntry
{
Hash hash;
LedgerHeader header;

// reserved for future use
union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class LedgerHeaderHistoryEntry(
    val hash: Hash,
    val header: LedgerHeader,
    val ext: LedgerHeaderHistoryEntryExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        hash.encode(stream)
        header.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<LedgerHeaderHistoryEntry> {
        override fun decode(stream: XdrInputStream): LedgerHeaderHistoryEntry {
            val hash = Hash.decode(stream)
            val header = LedgerHeader.decode(stream)
            val ext = LedgerHeaderHistoryEntryExt.decode(stream)
            return LedgerHeaderHistoryEntry(
                hash,
                header,
                ext,
            )
        }
    }

    /**
     * LedgerHeaderHistoryEntryExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class LedgerHeaderHistoryEntryExt(val type: Int) : XdrElement {
        data object LedgerHeaderHistoryEntryExtV0 : LedgerHeaderHistoryEntryExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<LedgerHeaderHistoryEntryExt> {
            override fun decode(stream: XdrInputStream): LedgerHeaderHistoryEntryExt {
                return when (val type = Int.decode(stream)) {
                    0 -> LedgerHeaderHistoryEntryExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
