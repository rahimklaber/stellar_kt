// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ExistenceProofBody's original definition in the XDR file is:
 * ```
 * struct ExistenceProofBody
{
LedgerKey keysToProve<>;

// Bounds for each key being proved, where bound[n]
// corresponds to keysToProve[n]
ColdArchiveBucketEntry lowBoundEntries<>;
ColdArchiveBucketEntry highBoundEntries<>;

// Vector of vectors, where proofLevels[level]
// contains all HashNodes that correspond with that level
ProofLevel proofLevels<>;
};
 * ```
 */
data class ExistenceProofBody(
    val keysToProve: List<LedgerKey>,
    val lowBoundEntries: List<ColdArchiveBucketEntry>,
    val highBoundEntries: List<ColdArchiveBucketEntry>,
    val proofLevels: List<ProofLevel>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        val keysToProveSize = keysToProve.size
        stream.writeInt(keysToProveSize)
        keysToProve.encodeXdrElements(stream)
        val lowBoundEntriesSize = lowBoundEntries.size
        stream.writeInt(lowBoundEntriesSize)
        lowBoundEntries.encodeXdrElements(stream)
        val highBoundEntriesSize = highBoundEntries.size
        stream.writeInt(highBoundEntriesSize)
        highBoundEntries.encodeXdrElements(stream)
        val proofLevelsSize = proofLevels.size
        stream.writeInt(proofLevelsSize)
        proofLevels.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<ExistenceProofBody> {
        override fun decode(stream: XdrInputStream): ExistenceProofBody {
            val keysToProveSize = stream.readInt()
            val keysToProve: List<LedgerKey> = decodeXdrElementsList(keysToProveSize, stream, LedgerKey.decoder())
            val lowBoundEntriesSize = stream.readInt()
            val lowBoundEntries: List<ColdArchiveBucketEntry> = decodeXdrElementsList(lowBoundEntriesSize, stream, ColdArchiveBucketEntry.decoder())
            val highBoundEntriesSize = stream.readInt()
            val highBoundEntries: List<ColdArchiveBucketEntry> = decodeXdrElementsList(highBoundEntriesSize, stream, ColdArchiveBucketEntry.decoder())
            val proofLevelsSize = stream.readInt()
            val proofLevels: List<ProofLevel> = decodeXdrElementsList(proofLevelsSize, stream, ProofLevel.decoder())
            return ExistenceProofBody(
                keysToProve,
                lowBoundEntries,
                highBoundEntries,
                proofLevels,
            )
        }
    }
}
