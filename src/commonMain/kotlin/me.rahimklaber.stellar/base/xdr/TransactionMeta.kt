// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * TransactionMeta's original definition in the XDR file is:
 * ```
 * union TransactionMeta switch (int v)
{
case 0:
OperationMeta operations<>;
case 1:
TransactionMetaV1 v1;
case 2:
TransactionMetaV2 v2;
case 3:
TransactionMetaV3 v3;
case 4:
TransactionMetaV4 v4;
};
 * ```
 */
sealed class TransactionMeta(val type: Int) : XdrElement {
    fun operationsOrNull(): TransactionMetaV0? = if (this is TransactionMetaV0) this else null
    data class TransactionMetaV0(
        val operations: List<OperationMeta>,
    ) : TransactionMeta(0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            val operationsSize = operations.size
            stream.writeInt(operationsSize)
            operations.encodeXdrElements(stream)
        }
    }

    fun v1OrNull(): TransactionMetaV1? = if (this is TransactionMetaV1) this else null
    data class TransactionMetaV1(
        val v1: me.rahimklaber.stellar.base.xdr.TransactionMetaV1,
    ) : TransactionMeta(1) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v1.encode(stream)
        }
    }

    fun v2OrNull(): TransactionMetaV2? = if (this is TransactionMetaV2) this else null
    data class TransactionMetaV2(
        val v2: me.rahimklaber.stellar.base.xdr.TransactionMetaV2,
    ) : TransactionMeta(2) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v2.encode(stream)
        }
    }

    fun v3OrNull(): TransactionMetaV3? = if (this is TransactionMetaV3) this else null
    data class TransactionMetaV3(
        val v3: me.rahimklaber.stellar.base.xdr.TransactionMetaV3,
    ) : TransactionMeta(3) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v3.encode(stream)
        }
    }

    fun v4OrNull(): TransactionMetaV4? = if (this is TransactionMetaV4) this else null
    data class TransactionMetaV4(
        val v4: me.rahimklaber.stellar.base.xdr.TransactionMetaV4,
    ) : TransactionMeta(4) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v4.encode(stream)
        }
    }

    companion object : XdrElementDecoder<TransactionMeta> {
        override fun decode(stream: XdrInputStream): TransactionMeta {
            return when (val type = Int.decode(stream)) {
                0 -> {
                    val operationsSize = stream.readInt()
                    val operations: List<OperationMeta> = decodeXdrElementsList(operationsSize, stream, OperationMeta.decoder())
                    TransactionMetaV0(operations)
                }

                1 -> {
                    val v1 = me.rahimklaber.stellar.base.xdr.TransactionMetaV1.decode(stream)
                    TransactionMetaV1(v1)
                }

                2 -> {
                    val v2 = me.rahimklaber.stellar.base.xdr.TransactionMetaV2.decode(stream)
                    TransactionMetaV2(v2)
                }

                3 -> {
                    val v3 = me.rahimklaber.stellar.base.xdr.TransactionMetaV3.decode(stream)
                    TransactionMetaV3(v3)
                }

                4 -> {
                    val v4 = me.rahimklaber.stellar.base.xdr.TransactionMetaV4.decode(stream)
                    TransactionMetaV4(v4)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
