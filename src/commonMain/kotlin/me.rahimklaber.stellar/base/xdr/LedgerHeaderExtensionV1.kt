// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LedgerHeaderExtensionV1's original definition in the XDR file is:
 * ```
 * struct LedgerHeaderExtensionV1
{
uint32 flags; // LedgerHeaderFlags

union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class LedgerHeaderExtensionV1(
    val flags: Uint32,
    val ext: LedgerHeaderExtensionV1Ext,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        flags.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<LedgerHeaderExtensionV1> {
        override fun decode(stream: XdrInputStream): LedgerHeaderExtensionV1 {
            val flags = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val ext = LedgerHeaderExtensionV1Ext.decode(stream)
            return LedgerHeaderExtensionV1(
                flags,
                ext,
            )
        }
    }

    /**
     * LedgerHeaderExtensionV1Ext's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class LedgerHeaderExtensionV1Ext(val type: Int) : XdrElement {
        data object LedgerHeaderExtensionV1ExtV0 : LedgerHeaderExtensionV1Ext(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<LedgerHeaderExtensionV1Ext> {
            override fun decode(stream: XdrInputStream): LedgerHeaderExtensionV1Ext {
                return when (val type = Int.decode(stream)) {
                    0 -> LedgerHeaderExtensionV1ExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
