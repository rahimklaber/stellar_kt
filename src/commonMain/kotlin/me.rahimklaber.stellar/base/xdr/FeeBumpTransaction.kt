// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * FeeBumpTransaction's original definition in the XDR file is:
 * ```
 * struct FeeBumpTransaction
{
MuxedAccount feeSource;
int64 fee;
union switch (EnvelopeType type)
{
case ENVELOPE_TYPE_TX:
TransactionV1Envelope v1;
}
innerTx;
union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class FeeBumpTransaction(
    val feeSource: MuxedAccount,
    val fee: Int64,
    val innerTx: FeeBumpTransactionInnerTx,
    val ext: FeeBumpTransactionExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        feeSource.encode(stream)
        fee.encode(stream)
        innerTx.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<FeeBumpTransaction> {
        override fun decode(stream: XdrInputStream): FeeBumpTransaction {
            val feeSource = MuxedAccount.decode(stream)
            val fee = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val innerTx = FeeBumpTransactionInnerTx.decode(stream)
            val ext = FeeBumpTransactionExt.decode(stream)
            return FeeBumpTransaction(
                feeSource,
                fee,
                innerTx,
                ext,
            )
        }
    }

    /**
     * FeeBumpTransactionInnerTx's original definition in the XDR file is:
     * ```
     * union switch (EnvelopeType type)
    {
    case ENVELOPE_TYPE_TX:
    TransactionV1Envelope v1;
    }
     * ```
     */
    sealed class FeeBumpTransactionInnerTx(val type: EnvelopeType) : XdrElement {
        fun v1OrNull(): Tx? = if (this is Tx) this else null
        data class Tx(
            val v1: TransactionV1Envelope,
        ) : FeeBumpTransactionInnerTx(EnvelopeType.ENVELOPE_TYPE_TX) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                v1.encode(stream)
            }
        }

        companion object : XdrElementDecoder<FeeBumpTransactionInnerTx> {
            override fun decode(stream: XdrInputStream): FeeBumpTransactionInnerTx {
                return when (val type = EnvelopeType.decode(stream)) {
                    EnvelopeType.ENVELOPE_TYPE_TX -> {
                        val v1 = TransactionV1Envelope.decode(stream)
                        Tx(v1)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }

    /**
     * FeeBumpTransactionExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class FeeBumpTransactionExt(val type: Int) : XdrElement {
        data object FeeBumpTransactionExtV0 : FeeBumpTransactionExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<FeeBumpTransactionExt> {
            override fun decode(stream: XdrInputStream): FeeBumpTransactionExt {
                return when (val type = Int.decode(stream)) {
                    0 -> FeeBumpTransactionExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
