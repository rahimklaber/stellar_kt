// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ContractEvent's original definition in the XDR file is:
 * ```
 * struct ContractEvent
{
// We can use this to add more fields, or because it
// is first, to change ContractEvent into a union.
ExtensionPoint ext;

Hash* contractID;
ContractEventType type;

union switch (int v)
{
case 0:
struct
{
SCVal topics<>;
SCVal data;
} v0;
}
body;
};
 * ```
 */
data class ContractEvent(
    val ext: ExtensionPoint,
    val contractID: Hash?,
    val type: ContractEventType,
    val body: ContractEventBody,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        if (contractID != null) {
            stream.writeInt(1)
            contractID.encode(stream)
        } else {
            stream.writeInt(0)
        }
        type.encode(stream)
        body.encode(stream)
    }

    companion object : XdrElementDecoder<ContractEvent> {
        override fun decode(stream: XdrInputStream): ContractEvent {
            val ext = ExtensionPoint.decode(stream)
            val contractIDPresent = stream.readInt()
            val contractID = if (contractIDPresent != 0) {
                Hash.decode(stream)
            } else {
                null
            }
            val type = ContractEventType.decode(stream)
            val body = ContractEventBody.decode(stream)
            return ContractEvent(
                ext,
                contractID,
                type,
                body,
            )
        }
    }

    /**
     * ContractEventBody's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    struct
    {
    SCVal topics<>;
    SCVal data;
    } v0;
    }
     * ```
     */
    sealed class ContractEventBody(val type: Int) : XdrElement {
        fun v0OrNull(): ContractEventBodyV0? = if (this is ContractEventBodyV0) this else null
        data class ContractEventBodyV0(
            val v0: ContractEventV0Anon,
        ) : ContractEventBody(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                v0.encode(stream)
            }
        }

        companion object : XdrElementDecoder<ContractEventBody> {
            override fun decode(stream: XdrInputStream): ContractEventBody {
                return when (val type = Int.decode(stream)) {
                    0 -> {
                        val v0 = ContractEventV0Anon.decode(stream)
                        ContractEventBodyV0(v0)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }

        /**
         * ContractEventV0Anon's original definition in the XDR file is:
         * ```
         * struct
        {
        SCVal topics<>;
        SCVal data;
        }
         * ```
         */
        data class ContractEventV0Anon(
            val topics: List<SCVal>,
            val data: SCVal,
        ) : XdrElement {
            override fun encode(stream: XdrOutputStream) {
                val topicsSize = topics.size
                stream.writeInt(topicsSize)
                topics.encodeXdrElements(stream)
                data.encode(stream)
            }

            companion object : XdrElementDecoder<ContractEventV0Anon> {
                override fun decode(stream: XdrInputStream): ContractEventV0Anon {
                    val topicsSize = stream.readInt()
                    val topics: List<SCVal> = decodeXdrElementsList(topicsSize, stream, SCVal.decoder())
                    val data = SCVal.decode(stream)
                    return ContractEventV0Anon(
                        topics,
                        data,
                    )
                }
            }

        }
    }
}
