// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * PersistedSCPStateV0's original definition in the XDR file is:
 * ```
 * struct PersistedSCPStateV0
{
SCPEnvelope scpEnvelopes<>;
SCPQuorumSet quorumSets<>;
StoredTransactionSet txSets<>;
};
 * ```
 */
data class PersistedSCPStateV0(
    val scpEnvelopes: List<SCPEnvelope>,
    val quorumSets: List<SCPQuorumSet>,
    val txSets: List<StoredTransactionSet>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        val scpEnvelopesSize = scpEnvelopes.size
        stream.writeInt(scpEnvelopesSize)
        scpEnvelopes.encodeXdrElements(stream)
        val quorumSetsSize = quorumSets.size
        stream.writeInt(quorumSetsSize)
        quorumSets.encodeXdrElements(stream)
        val txSetsSize = txSets.size
        stream.writeInt(txSetsSize)
        txSets.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<PersistedSCPStateV0> {
        override fun decode(stream: XdrInputStream): PersistedSCPStateV0 {
            val scpEnvelopesSize = stream.readInt()
            val scpEnvelopes: List<SCPEnvelope> = decodeXdrElementsList(scpEnvelopesSize, stream, SCPEnvelope.decoder())
            val quorumSetsSize = stream.readInt()
            val quorumSets: List<SCPQuorumSet> = decodeXdrElementsList(quorumSetsSize, stream, SCPQuorumSet.decoder())
            val txSetsSize = stream.readInt()
            val txSets: List<StoredTransactionSet> = decodeXdrElementsList(txSetsSize, stream, StoredTransactionSet.decoder())
            return PersistedSCPStateV0(
                scpEnvelopes,
                quorumSets,
                txSets,
            )
        }
    }
}
