// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ClaimLiquidityAtom's original definition in the XDR file is:
 * ```
 * struct ClaimLiquidityAtom
{
PoolID liquidityPoolID;

// amount and asset taken from the pool
Asset assetSold;
int64 amountSold;

// amount and asset sent to the pool
Asset assetBought;
int64 amountBought;
};
 * ```
 */
data class ClaimLiquidityAtom(
    val liquidityPoolID: PoolID,
    val assetSold: Asset,
    val amountSold: Int64,
    val assetBought: Asset,
    val amountBought: Int64,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        liquidityPoolID.encode(stream)
        assetSold.encode(stream)
        amountSold.encode(stream)
        assetBought.encode(stream)
        amountBought.encode(stream)
    }

    companion object : XdrElementDecoder<ClaimLiquidityAtom> {
        override fun decode(stream: XdrInputStream): ClaimLiquidityAtom {
            val liquidityPoolID = PoolID.decode(stream)
            val assetSold = Asset.decode(stream)
            val amountSold = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val assetBought = Asset.decode(stream)
            val amountBought = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            return ClaimLiquidityAtom(
                liquidityPoolID,
                assetSold,
                amountSold,
                assetBought,
                amountBought,
            )
        }
    }
}
