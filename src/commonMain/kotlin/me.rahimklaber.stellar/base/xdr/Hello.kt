// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * Hello's original definition in the XDR file is:
 * ```
 * struct Hello
{
uint32 ledgerVersion;
uint32 overlayVersion;
uint32 overlayMinVersion;
Hash networkID;
string versionStr<100>;
int listeningPort;
NodeID peerID;
AuthCert cert;
uint256 nonce;
};
 * ```
 */
data class Hello(
    val ledgerVersion: Uint32,
    val overlayVersion: Uint32,
    val overlayMinVersion: Uint32,
    val networkID: Hash,
    val versionStr: String,
    val listeningPort: Int,
    val peerID: NodeID,
    val cert: AuthCert,
    val nonce: Uint256,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ledgerVersion.encode(stream)
        overlayVersion.encode(stream)
        overlayMinVersion.encode(stream)
        networkID.encode(stream)
        val versionStrSize = versionStr.length
        stream.writeInt(versionStrSize)
        stream.writeBytes(versionStr.encodeToByteArray())
        stream.writeInt(listeningPort)
        peerID.encode(stream)
        cert.encode(stream)
        nonce.encode(stream)
    }

    companion object : XdrElementDecoder<Hello> {
        override fun decode(stream: XdrInputStream): Hello {
            val ledgerVersion = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val overlayVersion = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val overlayMinVersion = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val networkID = Hash.decode(stream)
            val versionStrSize = stream.readInt()
            val versionStr = decodeString(versionStrSize, stream)
            val listeningPort = stream.readInt()
            val peerID = NodeID.decode(stream)
            val cert = AuthCert.decode(stream)
            val nonce = Uint256.decode(stream)
            return Hello(
                ledgerVersion,
                overlayVersion,
                overlayMinVersion,
                networkID,
                versionStr,
                listeningPort,
                peerID,
                cert,
                nonce,
            )
        }
    }
}
