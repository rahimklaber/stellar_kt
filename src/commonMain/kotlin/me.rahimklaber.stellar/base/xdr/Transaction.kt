// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * Transaction's original definition in the XDR file is:
 * ```
 * struct Transaction
{
// account used to run the transaction
MuxedAccount sourceAccount;

// the fee the sourceAccount will pay
uint32 fee;

// sequence number to consume in the account
SequenceNumber seqNum;

// validity conditions
Preconditions cond;

Memo memo;

Operation operations<MAX_OPS_PER_TX>;

// reserved for future use
union switch (int v)
{
case 0:
void;
case 1:
SorobanTransactionData sorobanData;
}
ext;
};
 * ```
 */
data class Transaction(
    val sourceAccount: MuxedAccount,
    val fee: Uint32,
    val seqNum: SequenceNumber,
    val cond: Preconditions,
    val memo: Memo,
    val operations: List<Operation>,
    val ext: TransactionExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        sourceAccount.encode(stream)
        fee.encode(stream)
        seqNum.encode(stream)
        cond.encode(stream)
        memo.encode(stream)
        val operationsSize = operations.size
        stream.writeInt(operationsSize)
        operations.encodeXdrElements(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<Transaction> {
        override fun decode(stream: XdrInputStream): Transaction {
            val sourceAccount = MuxedAccount.decode(stream)
            val fee = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val seqNum = SequenceNumber.decode(stream)
            val cond = Preconditions.decode(stream)
            val memo = Memo.decode(stream)
            val operationsSize = stream.readInt()
            val operations: List<Operation> = decodeXdrElementsList(operationsSize, stream, Operation.decoder())
            val ext = TransactionExt.decode(stream)
            return Transaction(
                sourceAccount,
                fee,
                seqNum,
                cond,
                memo,
                operations,
                ext,
            )
        }
    }

    /**
     * TransactionExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    case 1:
    SorobanTransactionData sorobanData;
    }
     * ```
     */
    sealed class TransactionExt(val type: Int) : XdrElement {
        data object TransactionExtV0 : TransactionExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun sorobanDataOrNull(): TransactionExtV1? = if (this is TransactionExtV1) this else null
        data class TransactionExtV1(
            val sorobanData: SorobanTransactionData,
        ) : TransactionExt(1) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                sorobanData.encode(stream)
            }
        }

        companion object : XdrElementDecoder<TransactionExt> {
            override fun decode(stream: XdrInputStream): TransactionExt {
                return when (val type = Int.decode(stream)) {
                    0 -> TransactionExtV0
                    1 -> {
                        val sorobanData = SorobanTransactionData.decode(stream)
                        TransactionExtV1(sorobanData)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
