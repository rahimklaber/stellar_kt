// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ArchivalProof's original definition in the XDR file is:
 * ```
 * struct ArchivalProof
{
uint32 epoch; // AST Subtree for this proof

union switch (ArchivalProofType t)
{
case EXISTENCE:
NonexistenceProofBody nonexistenceProof;
case NONEXISTENCE:
ExistenceProofBody existenceProof;
} body;
};
 * ```
 */
data class ArchivalProof(
    val epoch: Uint32,
    val body: ArchivalProofBody,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        epoch.encode(stream)
        body.encode(stream)
    }

    companion object : XdrElementDecoder<ArchivalProof> {
        override fun decode(stream: XdrInputStream): ArchivalProof {
            val epoch = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val body = ArchivalProofBody.decode(stream)
            return ArchivalProof(
                epoch,
                body,
            )
        }
    }

    /**
     * ArchivalProofBody's original definition in the XDR file is:
     * ```
     * union switch (ArchivalProofType t)
    {
    case EXISTENCE:
    NonexistenceProofBody nonexistenceProof;
    case NONEXISTENCE:
    ExistenceProofBody existenceProof;
    }
     * ```
     */
    sealed class ArchivalProofBody(val type: ArchivalProofType) : XdrElement {
        fun nonexistenceProofOrNull(): Existence? = if (this is Existence) this else null
        data class Existence(
            val nonexistenceProof: NonexistenceProofBody,
        ) : ArchivalProofBody(ArchivalProofType.EXISTENCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                nonexistenceProof.encode(stream)
            }
        }

        fun existenceProofOrNull(): Nonexistence? = if (this is Nonexistence) this else null
        data class Nonexistence(
            val existenceProof: ExistenceProofBody,
        ) : ArchivalProofBody(ArchivalProofType.NONEXISTENCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                existenceProof.encode(stream)
            }
        }

        companion object : XdrElementDecoder<ArchivalProofBody> {
            override fun decode(stream: XdrInputStream): ArchivalProofBody {
                return when (val type = ArchivalProofType.decode(stream)) {
                    ArchivalProofType.EXISTENCE -> {
                        val nonexistenceProof = NonexistenceProofBody.decode(stream)
                        Existence(nonexistenceProof)
                    }

                    ArchivalProofType.NONEXISTENCE -> {
                        val existenceProof = ExistenceProofBody.decode(stream)
                        Nonexistence(existenceProof)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
