// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * TxSetComponent's original definition in the XDR file is:
 * ```
 * union TxSetComponent switch (TxSetComponentType type)
{
case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:
struct
{
int64* baseFee;
TransactionEnvelope txs<>;
} txsMaybeDiscountedFee;
};
 * ```
 */
sealed class TxSetComponent(val type: TxSetComponentType) : XdrElement {
    fun txsMaybeDiscountedFeeOrNull(): TxsetCompTxsMaybeDiscountedFee? = if (this is TxsetCompTxsMaybeDiscountedFee) this else null
    data class TxsetCompTxsMaybeDiscountedFee(
        val txsMaybeDiscountedFee: TxSetComponentTxsMaybeDiscountedFee,
    ) : TxSetComponent(TxSetComponentType.TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            txsMaybeDiscountedFee.encode(stream)
        }
    }

    companion object : XdrElementDecoder<TxSetComponent> {
        override fun decode(stream: XdrInputStream): TxSetComponent {
            return when (val type = TxSetComponentType.decode(stream)) {
                TxSetComponentType.TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE -> {
                    val txsMaybeDiscountedFee = TxSetComponentTxsMaybeDiscountedFee.decode(stream)
                    TxsetCompTxsMaybeDiscountedFee(txsMaybeDiscountedFee)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * TxSetComponentTxsMaybeDiscountedFee's original definition in the XDR file is:
     * ```
     * struct
    {
    int64* baseFee;
    TransactionEnvelope txs<>;
    }
     * ```
     */
    data class TxSetComponentTxsMaybeDiscountedFee(
        val baseFee: Int64?,
        val txs: List<TransactionEnvelope>,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            if (baseFee != null) {
                stream.writeInt(1)
                baseFee.encode(stream)
            } else {
                stream.writeInt(0)
            }
            val txsSize = txs.size
            stream.writeInt(txsSize)
            txs.encodeXdrElements(stream)
        }

        companion object : XdrElementDecoder<TxSetComponentTxsMaybeDiscountedFee> {
            override fun decode(stream: XdrInputStream): TxSetComponentTxsMaybeDiscountedFee {
                val baseFeePresent = stream.readInt()
                val baseFee = if (baseFeePresent != 0) {
                    me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
                } else {
                    null
                }
                val txsSize = stream.readInt()
                val txs: List<TransactionEnvelope> = decodeXdrElementsList(txsSize, stream, TransactionEnvelope.decoder())
                return TxSetComponentTxsMaybeDiscountedFee(
                    baseFee,
                    txs,
                )
            }
        }

    }
}
