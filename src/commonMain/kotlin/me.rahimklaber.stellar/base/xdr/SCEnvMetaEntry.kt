// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCEnvMetaEntry's original definition in the XDR file is:
 * ```
 * union SCEnvMetaEntry switch (SCEnvMetaKind kind)
{
case SC_ENV_META_KIND_INTERFACE_VERSION:
struct {
uint32 protocol;
uint32 preRelease;
} interfaceVersion;
};
 * ```
 */
sealed class SCEnvMetaEntry(val type: SCEnvMetaKind) : XdrElement {
    fun interfaceVersionOrNull(): InterfaceVersion? = if (this is InterfaceVersion) this else null
    data class InterfaceVersion(
        val interfaceVersion: SCEnvMetaEntryInterfaceVersion,
    ) : SCEnvMetaEntry(SCEnvMetaKind.SC_ENV_META_KIND_INTERFACE_VERSION) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            interfaceVersion.encode(stream)
        }
    }

    companion object : XdrElementDecoder<SCEnvMetaEntry> {
        override fun decode(stream: XdrInputStream): SCEnvMetaEntry {
            return when (val type = SCEnvMetaKind.decode(stream)) {
                SCEnvMetaKind.SC_ENV_META_KIND_INTERFACE_VERSION -> {
                    val interfaceVersion = SCEnvMetaEntryInterfaceVersion.decode(stream)
                    InterfaceVersion(interfaceVersion)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * SCEnvMetaEntryInterfaceVersion's original definition in the XDR file is:
     * ```
     * struct {
    uint32 protocol;
    uint32 preRelease;
    }
     * ```
     */
    data class SCEnvMetaEntryInterfaceVersion(
        val protocol: Uint32,
        val preRelease: Uint32,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            protocol.encode(stream)
            preRelease.encode(stream)
        }

        companion object : XdrElementDecoder<SCEnvMetaEntryInterfaceVersion> {
            override fun decode(stream: XdrInputStream): SCEnvMetaEntryInterfaceVersion {
                val protocol = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
                val preRelease = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
                return SCEnvMetaEntryInterfaceVersion(
                    protocol,
                    preRelease,
                )
            }
        }

    }
}
