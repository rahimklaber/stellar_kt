// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCSpecEntry's original definition in the XDR file is:
 * ```
 * union SCSpecEntry switch (SCSpecEntryKind kind)
{
case SC_SPEC_ENTRY_FUNCTION_V0:
SCSpecFunctionV0 functionV0;
case SC_SPEC_ENTRY_UDT_STRUCT_V0:
SCSpecUDTStructV0 udtStructV0;
case SC_SPEC_ENTRY_UDT_UNION_V0:
SCSpecUDTUnionV0 udtUnionV0;
case SC_SPEC_ENTRY_UDT_ENUM_V0:
SCSpecUDTEnumV0 udtEnumV0;
case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:
SCSpecUDTErrorEnumV0 udtErrorEnumV0;
};
 * ```
 */
sealed class SCSpecEntry(val type: SCSpecEntryKind) : XdrElement {
    fun functionV0OrNull(): ScSpecEntryFunctionV0? = if (this is ScSpecEntryFunctionV0) this else null
    data class ScSpecEntryFunctionV0(
        val functionV0: SCSpecFunctionV0,
    ) : SCSpecEntry(SCSpecEntryKind.SC_SPEC_ENTRY_FUNCTION_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            functionV0.encode(stream)
        }
    }

    fun udtStructV0OrNull(): ScSpecEntryUdtStructV0? = if (this is ScSpecEntryUdtStructV0) this else null
    data class ScSpecEntryUdtStructV0(
        val udtStructV0: SCSpecUDTStructV0,
    ) : SCSpecEntry(SCSpecEntryKind.SC_SPEC_ENTRY_UDT_STRUCT_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            udtStructV0.encode(stream)
        }
    }

    fun udtUnionV0OrNull(): ScSpecEntryUdtUnionV0? = if (this is ScSpecEntryUdtUnionV0) this else null
    data class ScSpecEntryUdtUnionV0(
        val udtUnionV0: SCSpecUDTUnionV0,
    ) : SCSpecEntry(SCSpecEntryKind.SC_SPEC_ENTRY_UDT_UNION_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            udtUnionV0.encode(stream)
        }
    }

    fun udtEnumV0OrNull(): ScSpecEntryUdtEnumV0? = if (this is ScSpecEntryUdtEnumV0) this else null
    data class ScSpecEntryUdtEnumV0(
        val udtEnumV0: SCSpecUDTEnumV0,
    ) : SCSpecEntry(SCSpecEntryKind.SC_SPEC_ENTRY_UDT_ENUM_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            udtEnumV0.encode(stream)
        }
    }

    fun udtErrorEnumV0OrNull(): ScSpecEntryUdtErrorEnumV0? = if (this is ScSpecEntryUdtErrorEnumV0) this else null
    data class ScSpecEntryUdtErrorEnumV0(
        val udtErrorEnumV0: SCSpecUDTErrorEnumV0,
    ) : SCSpecEntry(SCSpecEntryKind.SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            udtErrorEnumV0.encode(stream)
        }
    }

    companion object : XdrElementDecoder<SCSpecEntry> {
        override fun decode(stream: XdrInputStream): SCSpecEntry {
            return when (val type = SCSpecEntryKind.decode(stream)) {
                SCSpecEntryKind.SC_SPEC_ENTRY_FUNCTION_V0 -> {
                    val functionV0 = SCSpecFunctionV0.decode(stream)
                    ScSpecEntryFunctionV0(functionV0)
                }

                SCSpecEntryKind.SC_SPEC_ENTRY_UDT_STRUCT_V0 -> {
                    val udtStructV0 = SCSpecUDTStructV0.decode(stream)
                    ScSpecEntryUdtStructV0(udtStructV0)
                }

                SCSpecEntryKind.SC_SPEC_ENTRY_UDT_UNION_V0 -> {
                    val udtUnionV0 = SCSpecUDTUnionV0.decode(stream)
                    ScSpecEntryUdtUnionV0(udtUnionV0)
                }

                SCSpecEntryKind.SC_SPEC_ENTRY_UDT_ENUM_V0 -> {
                    val udtEnumV0 = SCSpecUDTEnumV0.decode(stream)
                    ScSpecEntryUdtEnumV0(udtEnumV0)
                }

                SCSpecEntryKind.SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0 -> {
                    val udtErrorEnumV0 = SCSpecUDTErrorEnumV0.decode(stream)
                    ScSpecEntryUdtErrorEnumV0(udtErrorEnumV0)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
