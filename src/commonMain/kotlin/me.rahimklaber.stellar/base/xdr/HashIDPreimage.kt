// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * HashIDPreimage's original definition in the XDR file is:
 * ```
 * union HashIDPreimage switch (EnvelopeType type)
{
case ENVELOPE_TYPE_OP_ID:
struct
{
AccountID sourceAccount;
SequenceNumber seqNum;
uint32 opNum;
} operationID;
case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
struct
{
AccountID sourceAccount;
SequenceNumber seqNum;
uint32 opNum;
PoolID liquidityPoolID;
Asset asset;
} revokeID;
case ENVELOPE_TYPE_CONTRACT_ID:
struct
{
Hash networkID;
ContractIDPreimage contractIDPreimage;
} contractID;
case ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:
struct
{
Hash networkID;
int64 nonce;
uint32 signatureExpirationLedger;
SorobanAuthorizedInvocation invocation;
} sorobanAuthorization;
};
 * ```
 */
sealed class HashIDPreimage(val type: EnvelopeType) : XdrElement {
    fun operationIDOrNull(): OpId? = if (this is OpId) this else null
    data class OpId(
        val operationID: HashIDPreimageOperationID,
    ) : HashIDPreimage(EnvelopeType.ENVELOPE_TYPE_OP_ID) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            operationID.encode(stream)
        }
    }

    fun revokeIDOrNull(): PoolRevokeOpId? = if (this is PoolRevokeOpId) this else null
    data class PoolRevokeOpId(
        val revokeID: HashIDPreimageRevokeID,
    ) : HashIDPreimage(EnvelopeType.ENVELOPE_TYPE_POOL_REVOKE_OP_ID) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            revokeID.encode(stream)
        }
    }

    fun contractIDOrNull(): ContractId? = if (this is ContractId) this else null
    data class ContractId(
        val contractID: HashIDPreimageContractID,
    ) : HashIDPreimage(EnvelopeType.ENVELOPE_TYPE_CONTRACT_ID) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractID.encode(stream)
        }
    }

    fun sorobanAuthorizationOrNull(): SorobanAuthorization? = if (this is SorobanAuthorization) this else null
    data class SorobanAuthorization(
        val sorobanAuthorization: HashIDPreimageSorobanAuthorization,
    ) : HashIDPreimage(EnvelopeType.ENVELOPE_TYPE_SOROBAN_AUTHORIZATION) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            sorobanAuthorization.encode(stream)
        }
    }

    companion object : XdrElementDecoder<HashIDPreimage> {
        override fun decode(stream: XdrInputStream): HashIDPreimage {
            return when (val type = EnvelopeType.decode(stream)) {
                EnvelopeType.ENVELOPE_TYPE_OP_ID -> {
                    val operationID = HashIDPreimageOperationID.decode(stream)
                    OpId(operationID)
                }

                EnvelopeType.ENVELOPE_TYPE_POOL_REVOKE_OP_ID -> {
                    val revokeID = HashIDPreimageRevokeID.decode(stream)
                    PoolRevokeOpId(revokeID)
                }

                EnvelopeType.ENVELOPE_TYPE_CONTRACT_ID -> {
                    val contractID = HashIDPreimageContractID.decode(stream)
                    ContractId(contractID)
                }

                EnvelopeType.ENVELOPE_TYPE_SOROBAN_AUTHORIZATION -> {
                    val sorobanAuthorization = HashIDPreimageSorobanAuthorization.decode(stream)
                    SorobanAuthorization(sorobanAuthorization)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * HashIDPreimageOperationID's original definition in the XDR file is:
     * ```
     * struct
    {
    AccountID sourceAccount;
    SequenceNumber seqNum;
    uint32 opNum;
    }
     * ```
     */
    data class HashIDPreimageOperationID(
        val sourceAccount: AccountID,
        val seqNum: SequenceNumber,
        val opNum: Uint32,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            sourceAccount.encode(stream)
            seqNum.encode(stream)
            opNum.encode(stream)
        }

        companion object : XdrElementDecoder<HashIDPreimageOperationID> {
            override fun decode(stream: XdrInputStream): HashIDPreimageOperationID {
                val sourceAccount = AccountID.decode(stream)
                val seqNum = SequenceNumber.decode(stream)
                val opNum = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
                return HashIDPreimageOperationID(
                    sourceAccount,
                    seqNum,
                    opNum,
                )
            }
        }

    }

    /**
     * HashIDPreimageRevokeID's original definition in the XDR file is:
     * ```
     * struct
    {
    AccountID sourceAccount;
    SequenceNumber seqNum;
    uint32 opNum;
    PoolID liquidityPoolID;
    Asset asset;
    }
     * ```
     */
    data class HashIDPreimageRevokeID(
        val sourceAccount: AccountID,
        val seqNum: SequenceNumber,
        val opNum: Uint32,
        val liquidityPoolID: PoolID,
        val asset: Asset,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            sourceAccount.encode(stream)
            seqNum.encode(stream)
            opNum.encode(stream)
            liquidityPoolID.encode(stream)
            asset.encode(stream)
        }

        companion object : XdrElementDecoder<HashIDPreimageRevokeID> {
            override fun decode(stream: XdrInputStream): HashIDPreimageRevokeID {
                val sourceAccount = AccountID.decode(stream)
                val seqNum = SequenceNumber.decode(stream)
                val opNum = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
                val liquidityPoolID = PoolID.decode(stream)
                val asset = Asset.decode(stream)
                return HashIDPreimageRevokeID(
                    sourceAccount,
                    seqNum,
                    opNum,
                    liquidityPoolID,
                    asset,
                )
            }
        }

    }

    /**
     * HashIDPreimageContractID's original definition in the XDR file is:
     * ```
     * struct
    {
    Hash networkID;
    ContractIDPreimage contractIDPreimage;
    }
     * ```
     */
    data class HashIDPreimageContractID(
        val networkID: Hash,
        val contractIDPreimage: ContractIDPreimage,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            networkID.encode(stream)
            contractIDPreimage.encode(stream)
        }

        companion object : XdrElementDecoder<HashIDPreimageContractID> {
            override fun decode(stream: XdrInputStream): HashIDPreimageContractID {
                val networkID = Hash.decode(stream)
                val contractIDPreimage = ContractIDPreimage.decode(stream)
                return HashIDPreimageContractID(
                    networkID,
                    contractIDPreimage,
                )
            }
        }

    }

    /**
     * HashIDPreimageSorobanAuthorization's original definition in the XDR file is:
     * ```
     * struct
    {
    Hash networkID;
    int64 nonce;
    uint32 signatureExpirationLedger;
    SorobanAuthorizedInvocation invocation;
    }
     * ```
     */
    data class HashIDPreimageSorobanAuthorization(
        val networkID: Hash,
        val nonce: Int64,
        val signatureExpirationLedger: Uint32,
        val invocation: SorobanAuthorizedInvocation,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            networkID.encode(stream)
            nonce.encode(stream)
            signatureExpirationLedger.encode(stream)
            invocation.encode(stream)
        }

        companion object : XdrElementDecoder<HashIDPreimageSorobanAuthorization> {
            override fun decode(stream: XdrInputStream): HashIDPreimageSorobanAuthorization {
                val networkID = Hash.decode(stream)
                val nonce = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
                val signatureExpirationLedger = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
                val invocation = SorobanAuthorizedInvocation.decode(stream)
                return HashIDPreimageSorobanAuthorization(
                    networkID,
                    nonce,
                    signatureExpirationLedger,
                    invocation,
                )
            }
        }

    }
}
