// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SorobanTransactionMeta's original definition in the XDR file is:
 * ```
 * struct SorobanTransactionMeta
{
SorobanTransactionMetaExt ext;

ContractEvent events<>;             // custom events populated by the
// contracts themselves.
SCVal returnValue;                  // return value of the host fn invocation

// Diagnostics events that are not hashed.
// This will contain all contract and diagnostic events. Even ones
// that were emitted in a failed contract call.
DiagnosticEvent diagnosticEvents<>;
};
 * ```
 */
data class SorobanTransactionMeta(
    val ext: SorobanTransactionMetaExt,
    val events: List<ContractEvent>,
    val returnValue: SCVal,
    val diagnosticEvents: List<DiagnosticEvent>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        val eventsSize = events.size
        stream.writeInt(eventsSize)
        events.encodeXdrElements(stream)
        returnValue.encode(stream)
        val diagnosticEventsSize = diagnosticEvents.size
        stream.writeInt(diagnosticEventsSize)
        diagnosticEvents.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<SorobanTransactionMeta> {
        override fun decode(stream: XdrInputStream): SorobanTransactionMeta {
            val ext = SorobanTransactionMetaExt.decode(stream)
            val eventsSize = stream.readInt()
            val events: List<ContractEvent> = decodeXdrElementsList(eventsSize, stream, ContractEvent.decoder())
            val returnValue = SCVal.decode(stream)
            val diagnosticEventsSize = stream.readInt()
            val diagnosticEvents: List<DiagnosticEvent> = decodeXdrElementsList(diagnosticEventsSize, stream, DiagnosticEvent.decoder())
            return SorobanTransactionMeta(
                ext,
                events,
                returnValue,
                diagnosticEvents,
            )
        }
    }
}
