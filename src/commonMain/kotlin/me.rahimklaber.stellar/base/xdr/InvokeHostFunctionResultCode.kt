// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * InvokeHostFunctionResultCode's original definition in the XDR file is:
 * ```
 * enum InvokeHostFunctionResultCode
{
// codes considered as "success" for the operation
INVOKE_HOST_FUNCTION_SUCCESS = 0,

// codes considered as "failure" for the operation
INVOKE_HOST_FUNCTION_MALFORMED = -1,
INVOKE_HOST_FUNCTION_TRAPPED = -2,
INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,
INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED = -4,
INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE = -5
};
 * ```
 */
enum class InvokeHostFunctionResultCode(val value: Int) : XdrElement {
    INVOKE_HOST_FUNCTION_SUCCESS(0),
    INVOKE_HOST_FUNCTION_MALFORMED(-1),
    INVOKE_HOST_FUNCTION_TRAPPED(-2),
    INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED(-3),
    INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED(-4),
    INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE(-5);

    companion object : XdrElementDecoder<InvokeHostFunctionResultCode> {
        override fun decode(stream: XdrInputStream): InvokeHostFunctionResultCode {
            return when (val value = stream.readInt()) {
                0 -> INVOKE_HOST_FUNCTION_SUCCESS
                -1 -> INVOKE_HOST_FUNCTION_MALFORMED
                -2 -> INVOKE_HOST_FUNCTION_TRAPPED
                -3 -> INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED
                -4 -> INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED
                -5 -> INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE
                else -> throw IllegalArgumentException("Unknown enum value: " + value)
            }
        }
    }

    override fun encode(stream: XdrOutputStream) {
        stream.writeInt(value)
    }
}
