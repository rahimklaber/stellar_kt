// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * PathPaymentStrictReceiveResult's original definition in the XDR file is:
 * ```
 * union PathPaymentStrictReceiveResult switch (
PathPaymentStrictReceiveResultCode code)
{
case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:
struct
{
ClaimAtom offers<>;
SimplePaymentResult last;
} success;
case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:
case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:
case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:
case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:
case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:
case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:
case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:
case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:
void;
case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:
Asset noIssuer; // the asset that caused the error
case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:
case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:
case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:
void;
};
 * ```
 */
sealed class PathPaymentStrictReceiveResult(val type: PathPaymentStrictReceiveResultCode) : XdrElement {
    fun successOrNull(): PathPaymentStrictReceiveSuccess? = if (this is PathPaymentStrictReceiveSuccess) this else null
    data class PathPaymentStrictReceiveSuccess(
        val success: PathPaymentStrictReceiveResultSuccess,
    ) : PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            success.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveMalformed :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveUnderfunded :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveSrcNoTrust :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveSrcNotAuthorized :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveNoDestination :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveNoTrust :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveNotAuthorized :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveLineFull :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    fun noIssuerOrNull(): PathPaymentStrictReceiveNoIssuer? = if (this is PathPaymentStrictReceiveNoIssuer) this else null
    data class PathPaymentStrictReceiveNoIssuer(
        val noIssuer: Asset,
    ) : PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            noIssuer.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveTooFewOffers :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveOfferCrossSelf :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PathPaymentStrictReceiveOverSendmax :
        PathPaymentStrictReceiveResult(PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<PathPaymentStrictReceiveResult> {
        override fun decode(stream: XdrInputStream): PathPaymentStrictReceiveResult {
            return when (val type = PathPaymentStrictReceiveResultCode.decode(stream)) {
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_SUCCESS -> {
                    val success = PathPaymentStrictReceiveResultSuccess.decode(stream)
                    PathPaymentStrictReceiveSuccess(success)
                }

                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_MALFORMED -> PathPaymentStrictReceiveMalformed
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED -> PathPaymentStrictReceiveUnderfunded
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST -> PathPaymentStrictReceiveSrcNoTrust
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED -> PathPaymentStrictReceiveSrcNotAuthorized
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION -> PathPaymentStrictReceiveNoDestination
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST -> PathPaymentStrictReceiveNoTrust
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED -> PathPaymentStrictReceiveNotAuthorized
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL -> PathPaymentStrictReceiveLineFull
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER -> {
                    val noIssuer = Asset.decode(stream)
                    PathPaymentStrictReceiveNoIssuer(noIssuer)
                }

                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS -> PathPaymentStrictReceiveTooFewOffers
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF -> PathPaymentStrictReceiveOfferCrossSelf
                PathPaymentStrictReceiveResultCode.PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX -> PathPaymentStrictReceiveOverSendmax
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * PathPaymentStrictReceiveResultSuccess's original definition in the XDR file is:
     * ```
     * struct
    {
    ClaimAtom offers<>;
    SimplePaymentResult last;
    }
     * ```
     */
    data class PathPaymentStrictReceiveResultSuccess(
        val offers: List<ClaimAtom>,
        val last: SimplePaymentResult,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            val offersSize = offers.size
            stream.writeInt(offersSize)
            offers.encodeXdrElements(stream)
            last.encode(stream)
        }

        companion object : XdrElementDecoder<PathPaymentStrictReceiveResultSuccess> {
            override fun decode(stream: XdrInputStream): PathPaymentStrictReceiveResultSuccess {
                val offersSize = stream.readInt()
                val offers: List<ClaimAtom> = decodeXdrElementsList(offersSize, stream, ClaimAtom.decoder())
                val last = SimplePaymentResult.decode(stream)
                return PathPaymentStrictReceiveResultSuccess(
                    offers,
                    last,
                )
            }
        }

    }
}
