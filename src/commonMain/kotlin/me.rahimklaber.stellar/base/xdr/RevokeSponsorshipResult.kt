// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * RevokeSponsorshipResult's original definition in the XDR file is:
 * ```
 * union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)
{
case REVOKE_SPONSORSHIP_SUCCESS:
void;
case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
case REVOKE_SPONSORSHIP_NOT_SPONSOR:
case REVOKE_SPONSORSHIP_LOW_RESERVE:
case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
case REVOKE_SPONSORSHIP_MALFORMED:
void;
};
 * ```
 */
sealed class RevokeSponsorshipResult(val type: RevokeSponsorshipResultCode) : XdrElement {
    data object RevokeSponsorshipSuccess : RevokeSponsorshipResult(RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object RevokeSponsorshipDoesNotExist : RevokeSponsorshipResult(RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_DOES_NOT_EXIST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object RevokeSponsorshipNotSponsor : RevokeSponsorshipResult(RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_NOT_SPONSOR) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object RevokeSponsorshipLowReserve : RevokeSponsorshipResult(RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_LOW_RESERVE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object RevokeSponsorshipOnlyTransferable : RevokeSponsorshipResult(RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object RevokeSponsorshipMalformed : RevokeSponsorshipResult(RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<RevokeSponsorshipResult> {
        override fun decode(stream: XdrInputStream): RevokeSponsorshipResult {
            return when (val type = RevokeSponsorshipResultCode.decode(stream)) {
                RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_SUCCESS -> RevokeSponsorshipSuccess
                RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_DOES_NOT_EXIST -> RevokeSponsorshipDoesNotExist
                RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_NOT_SPONSOR -> RevokeSponsorshipNotSponsor
                RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_LOW_RESERVE -> RevokeSponsorshipLowReserve
                RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE -> RevokeSponsorshipOnlyTransferable
                RevokeSponsorshipResultCode.REVOKE_SPONSORSHIP_MALFORMED -> RevokeSponsorshipMalformed
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
