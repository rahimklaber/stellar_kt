// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ChangeTrustAsset's original definition in the XDR file is:
 * ```
 * union ChangeTrustAsset switch (AssetType type)
{
case ASSET_TYPE_NATIVE: // Not credit
void;

case ASSET_TYPE_CREDIT_ALPHANUM4:
AlphaNum4 alphaNum4;

case ASSET_TYPE_CREDIT_ALPHANUM12:
AlphaNum12 alphaNum12;

case ASSET_TYPE_POOL_SHARE:
LiquidityPoolParameters liquidityPool;

// add other asset types here in the future
};
 * ```
 */
sealed class ChangeTrustAsset(val type: AssetType) : XdrElement {
    data object Native : ChangeTrustAsset(AssetType.ASSET_TYPE_NATIVE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    fun alphaNum4OrNull(): CreditAlphanum4? = if (this is CreditAlphanum4) this else null
    data class CreditAlphanum4(
        val alphaNum4: AlphaNum4,
    ) : ChangeTrustAsset(AssetType.ASSET_TYPE_CREDIT_ALPHANUM4) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            alphaNum4.encode(stream)
        }
    }

    fun alphaNum12OrNull(): CreditAlphanum12? = if (this is CreditAlphanum12) this else null
    data class CreditAlphanum12(
        val alphaNum12: AlphaNum12,
    ) : ChangeTrustAsset(AssetType.ASSET_TYPE_CREDIT_ALPHANUM12) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            alphaNum12.encode(stream)
        }
    }

    fun liquidityPoolOrNull(): PoolShare? = if (this is PoolShare) this else null
    data class PoolShare(
        val liquidityPool: LiquidityPoolParameters,
    ) : ChangeTrustAsset(AssetType.ASSET_TYPE_POOL_SHARE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            liquidityPool.encode(stream)
        }
    }

    companion object : XdrElementDecoder<ChangeTrustAsset> {
        override fun decode(stream: XdrInputStream): ChangeTrustAsset {
            return when (val type = AssetType.decode(stream)) {
                AssetType.ASSET_TYPE_NATIVE -> Native
                AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 -> {
                    val alphaNum4 = AlphaNum4.decode(stream)
                    CreditAlphanum4(alphaNum4)
                }

                AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 -> {
                    val alphaNum12 = AlphaNum12.decode(stream)
                    CreditAlphanum12(alphaNum12)
                }

                AssetType.ASSET_TYPE_POOL_SHARE -> {
                    val liquidityPool = LiquidityPoolParameters.decode(stream)
                    PoolShare(liquidityPool)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
