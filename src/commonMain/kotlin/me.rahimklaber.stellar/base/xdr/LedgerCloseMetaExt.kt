// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LedgerCloseMetaExt's original definition in the XDR file is:
 * ```
 * union LedgerCloseMetaExt switch (int v)
{
case 0:
void;
case 1:
LedgerCloseMetaExtV1 v1;
};
 * ```
 */
sealed class LedgerCloseMetaExt(val type: Int) : XdrElement {
    data object LedgerCloseMetaExtV0 : LedgerCloseMetaExt(0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    fun v1OrNull(): LedgerCloseMetaExtV1? = if (this is LedgerCloseMetaExtV1) this else null
    data class LedgerCloseMetaExtV1(
        val v1: me.rahimklaber.stellar.base.xdr.LedgerCloseMetaExtV1,
    ) : LedgerCloseMetaExt(1) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v1.encode(stream)
        }
    }

    companion object : XdrElementDecoder<LedgerCloseMetaExt> {
        override fun decode(stream: XdrInputStream): LedgerCloseMetaExt {
            return when (val type = Int.decode(stream)) {
                0 -> LedgerCloseMetaExtV0
                1 -> {
                    val v1 = me.rahimklaber.stellar.base.xdr.LedgerCloseMetaExtV1.decode(stream)
                    LedgerCloseMetaExtV1(v1)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
