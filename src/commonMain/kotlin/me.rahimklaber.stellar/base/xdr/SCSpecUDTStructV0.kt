// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCSpecUDTStructV0's original definition in the XDR file is:
 * ```
 * struct SCSpecUDTStructV0
{
string doc<SC_SPEC_DOC_LIMIT>;
string lib<80>;
string name<60>;
SCSpecUDTStructFieldV0 fields<40>;
};
 * ```
 */
data class SCSpecUDTStructV0(
    val doc: String,
    val lib: String,
    val name: String,
    val fields: List<SCSpecUDTStructFieldV0>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        val docSize = doc.length
        stream.writeInt(docSize)
        stream.writeBytes(doc.encodeToByteArray())
        val libSize = lib.length
        stream.writeInt(libSize)
        stream.writeBytes(lib.encodeToByteArray())
        val nameSize = name.length
        stream.writeInt(nameSize)
        stream.writeBytes(name.encodeToByteArray())
        val fieldsSize = fields.size
        stream.writeInt(fieldsSize)
        fields.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<SCSpecUDTStructV0> {
        override fun decode(stream: XdrInputStream): SCSpecUDTStructV0 {
            val docSize = stream.readInt()
            val doc = decodeString(docSize, stream)
            val libSize = stream.readInt()
            val lib = decodeString(libSize, stream)
            val nameSize = stream.readInt()
            val name = decodeString(nameSize, stream)
            val fieldsSize = stream.readInt()
            val fields: List<SCSpecUDTStructFieldV0> = decodeXdrElementsList(fieldsSize, stream, SCSpecUDTStructFieldV0.decoder())
            return SCSpecUDTStructV0(
                doc,
                lib,
                name,
                fields,
            )
        }
    }
}
