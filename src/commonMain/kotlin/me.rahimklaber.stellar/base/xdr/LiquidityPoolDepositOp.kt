// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LiquidityPoolDepositOp's original definition in the XDR file is:
 * ```
 * struct LiquidityPoolDepositOp
{
PoolID liquidityPoolID;
int64 maxAmountA; // maximum amount of first asset to deposit
int64 maxAmountB; // maximum amount of second asset to deposit
Price minPrice;   // minimum depositA/depositB
Price maxPrice;   // maximum depositA/depositB
};
 * ```
 */
data class LiquidityPoolDepositOp(
    val liquidityPoolID: PoolID,
    val maxAmountA: Int64,
    val maxAmountB: Int64,
    val minPrice: Price,
    val maxPrice: Price,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        liquidityPoolID.encode(stream)
        maxAmountA.encode(stream)
        maxAmountB.encode(stream)
        minPrice.encode(stream)
        maxPrice.encode(stream)
    }

    companion object : XdrElementDecoder<LiquidityPoolDepositOp> {
        override fun decode(stream: XdrInputStream): LiquidityPoolDepositOp {
            val liquidityPoolID = PoolID.decode(stream)
            val maxAmountA = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val maxAmountB = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val minPrice = Price.decode(stream)
            val maxPrice = Price.decode(stream)
            return LiquidityPoolDepositOp(
                liquidityPoolID,
                maxAmountA,
                maxAmountB,
                minPrice,
                maxPrice,
            )
        }
    }
}
