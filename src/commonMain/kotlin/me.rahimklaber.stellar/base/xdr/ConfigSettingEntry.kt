// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ConfigSettingEntry's original definition in the XDR file is:
 * ```
 * union ConfigSettingEntry switch (ConfigSettingID configSettingID)
{
case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:
uint32 contractMaxSizeBytes;
case CONFIG_SETTING_CONTRACT_COMPUTE_V0:
ConfigSettingContractComputeV0 contractCompute;
case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:
ConfigSettingContractLedgerCostV0 contractLedgerCost;
case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:
ConfigSettingContractHistoricalDataV0 contractHistoricalData;
case CONFIG_SETTING_CONTRACT_EVENTS_V0:
ConfigSettingContractEventsV0 contractEvents;
case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:
ConfigSettingContractBandwidthV0 contractBandwidth;
case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:
ContractCostParams contractCostParamsCpuInsns;
case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:
ContractCostParams contractCostParamsMemBytes;
case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:
uint32 contractDataKeySizeBytes;
case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:
uint32 contractDataEntrySizeBytes;
case CONFIG_SETTING_STATE_ARCHIVAL:
StateArchivalSettings stateArchivalSettings;
case CONFIG_SETTING_CONTRACT_EXECUTION_LANES:
ConfigSettingContractExecutionLanesV0 contractExecutionLanes;
case CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:
uint64 bucketListSizeWindow<>;
case CONFIG_SETTING_EVICTION_ITERATOR:
EvictionIterator evictionIterator;
};
 * ```
 */
sealed class ConfigSettingEntry(val type: ConfigSettingID) : XdrElement {
    fun contractMaxSizeBytesOrNull(): ConfigSettingContractMaxSizeBytes? = if (this is ConfigSettingContractMaxSizeBytes) this else null
    data class ConfigSettingContractMaxSizeBytes(
        val contractMaxSizeBytes: Uint32,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractMaxSizeBytes.encode(stream)
        }
    }

    fun contractComputeOrNull(): ConfigSettingContractComputeV0? = if (this is ConfigSettingContractComputeV0) this else null
    data class ConfigSettingContractComputeV0(
        val contractCompute: me.rahimklaber.stellar.base.xdr.ConfigSettingContractComputeV0,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_COMPUTE_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractCompute.encode(stream)
        }
    }

    fun contractLedgerCostOrNull(): ConfigSettingContractLedgerCostV0? = if (this is ConfigSettingContractLedgerCostV0) this else null
    data class ConfigSettingContractLedgerCostV0(
        val contractLedgerCost: me.rahimklaber.stellar.base.xdr.ConfigSettingContractLedgerCostV0,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_LEDGER_COST_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractLedgerCost.encode(stream)
        }
    }

    fun contractHistoricalDataOrNull(): ConfigSettingContractHistoricalDataV0? = if (this is ConfigSettingContractHistoricalDataV0) this else null
    data class ConfigSettingContractHistoricalDataV0(
        val contractHistoricalData: me.rahimklaber.stellar.base.xdr.ConfigSettingContractHistoricalDataV0,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractHistoricalData.encode(stream)
        }
    }

    fun contractEventsOrNull(): ConfigSettingContractEventsV0? = if (this is ConfigSettingContractEventsV0) this else null
    data class ConfigSettingContractEventsV0(
        val contractEvents: me.rahimklaber.stellar.base.xdr.ConfigSettingContractEventsV0,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_EVENTS_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractEvents.encode(stream)
        }
    }

    fun contractBandwidthOrNull(): ConfigSettingContractBandwidthV0? = if (this is ConfigSettingContractBandwidthV0) this else null
    data class ConfigSettingContractBandwidthV0(
        val contractBandwidth: me.rahimklaber.stellar.base.xdr.ConfigSettingContractBandwidthV0,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_BANDWIDTH_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractBandwidth.encode(stream)
        }
    }

    fun contractCostParamsCpuInsnsOrNull(): ConfigSettingContractCostParamsCpuInstructions? =
        if (this is ConfigSettingContractCostParamsCpuInstructions) this else null

    data class ConfigSettingContractCostParamsCpuInstructions(
        val contractCostParamsCpuInsns: ContractCostParams,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractCostParamsCpuInsns.encode(stream)
        }
    }

    fun contractCostParamsMemBytesOrNull(): ConfigSettingContractCostParamsMemoryBytes? =
        if (this is ConfigSettingContractCostParamsMemoryBytes) this else null

    data class ConfigSettingContractCostParamsMemoryBytes(
        val contractCostParamsMemBytes: ContractCostParams,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractCostParamsMemBytes.encode(stream)
        }
    }

    fun contractDataKeySizeBytesOrNull(): ConfigSettingContractDataKeySizeBytes? = if (this is ConfigSettingContractDataKeySizeBytes) this else null
    data class ConfigSettingContractDataKeySizeBytes(
        val contractDataKeySizeBytes: Uint32,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractDataKeySizeBytes.encode(stream)
        }
    }

    fun contractDataEntrySizeBytesOrNull(): ConfigSettingContractDataEntrySizeBytes? =
        if (this is ConfigSettingContractDataEntrySizeBytes) this else null

    data class ConfigSettingContractDataEntrySizeBytes(
        val contractDataEntrySizeBytes: Uint32,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractDataEntrySizeBytes.encode(stream)
        }
    }

    fun stateArchivalSettingsOrNull(): ConfigSettingStateArchival? = if (this is ConfigSettingStateArchival) this else null
    data class ConfigSettingStateArchival(
        val stateArchivalSettings: StateArchivalSettings,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_STATE_ARCHIVAL) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            stateArchivalSettings.encode(stream)
        }
    }

    fun contractExecutionLanesOrNull(): ConfigSettingContractExecutionLanes? = if (this is ConfigSettingContractExecutionLanes) this else null
    data class ConfigSettingContractExecutionLanes(
        val contractExecutionLanes: ConfigSettingContractExecutionLanesV0,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_CONTRACT_EXECUTION_LANES) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            contractExecutionLanes.encode(stream)
        }
    }

    fun bucketListSizeWindowOrNull(): ConfigSettingBucketlistSizeWindow? = if (this is ConfigSettingBucketlistSizeWindow) this else null
    data class ConfigSettingBucketlistSizeWindow(
        val bucketListSizeWindow: List<Uint64>,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            val bucketListSizeWindowSize = bucketListSizeWindow.size
            stream.writeInt(bucketListSizeWindowSize)
            bucketListSizeWindow.encodeXdrElementsULong(stream)
        }
    }

    fun evictionIteratorOrNull(): ConfigSettingEvictionIterator? = if (this is ConfigSettingEvictionIterator) this else null
    data class ConfigSettingEvictionIterator(
        val evictionIterator: EvictionIterator,
    ) : ConfigSettingEntry(ConfigSettingID.CONFIG_SETTING_EVICTION_ITERATOR) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            evictionIterator.encode(stream)
        }
    }

    companion object : XdrElementDecoder<ConfigSettingEntry> {
        override fun decode(stream: XdrInputStream): ConfigSettingEntry {
            return when (val type = ConfigSettingID.decode(stream)) {
                ConfigSettingID.CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES -> {
                    val contractMaxSizeBytes = Uint32.decode(stream)
                    ConfigSettingContractMaxSizeBytes(contractMaxSizeBytes)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_COMPUTE_V0 -> {
                    val contractCompute = me.rahimklaber.stellar.base.xdr.ConfigSettingContractComputeV0.decode(stream)
                    ConfigSettingContractComputeV0(contractCompute)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_LEDGER_COST_V0 -> {
                    val contractLedgerCost = me.rahimklaber.stellar.base.xdr.ConfigSettingContractLedgerCostV0.decode(stream)
                    ConfigSettingContractLedgerCostV0(contractLedgerCost)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0 -> {
                    val contractHistoricalData = me.rahimklaber.stellar.base.xdr.ConfigSettingContractHistoricalDataV0.decode(stream)
                    ConfigSettingContractHistoricalDataV0(contractHistoricalData)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_EVENTS_V0 -> {
                    val contractEvents = me.rahimklaber.stellar.base.xdr.ConfigSettingContractEventsV0.decode(stream)
                    ConfigSettingContractEventsV0(contractEvents)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_BANDWIDTH_V0 -> {
                    val contractBandwidth = me.rahimklaber.stellar.base.xdr.ConfigSettingContractBandwidthV0.decode(stream)
                    ConfigSettingContractBandwidthV0(contractBandwidth)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS -> {
                    val contractCostParamsCpuInsns = ContractCostParams.decode(stream)
                    ConfigSettingContractCostParamsCpuInstructions(contractCostParamsCpuInsns)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES -> {
                    val contractCostParamsMemBytes = ContractCostParams.decode(stream)
                    ConfigSettingContractCostParamsMemoryBytes(contractCostParamsMemBytes)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES -> {
                    val contractDataKeySizeBytes = Uint32.decode(stream)
                    ConfigSettingContractDataKeySizeBytes(contractDataKeySizeBytes)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES -> {
                    val contractDataEntrySizeBytes = Uint32.decode(stream)
                    ConfigSettingContractDataEntrySizeBytes(contractDataEntrySizeBytes)
                }

                ConfigSettingID.CONFIG_SETTING_STATE_ARCHIVAL -> {
                    val stateArchivalSettings = StateArchivalSettings.decode(stream)
                    ConfigSettingStateArchival(stateArchivalSettings)
                }

                ConfigSettingID.CONFIG_SETTING_CONTRACT_EXECUTION_LANES -> {
                    val contractExecutionLanes = ConfigSettingContractExecutionLanesV0.decode(stream)
                    ConfigSettingContractExecutionLanes(contractExecutionLanes)
                }

                ConfigSettingID.CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW -> {
                    val bucketListSizeWindowSize = stream.readInt()
                    val bucketListSizeWindow: List<Uint64> = decodeXdrElementsList(bucketListSizeWindowSize, stream, Uint64.decoder())
                    ConfigSettingBucketlistSizeWindow(bucketListSizeWindow)
                }

                ConfigSettingID.CONFIG_SETTING_EVICTION_ITERATOR -> {
                    val evictionIterator = EvictionIterator.decode(stream)
                    ConfigSettingEvictionIterator(evictionIterator)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
