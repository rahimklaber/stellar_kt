// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ClaimableBalanceEntryExtensionV1's original definition in the XDR file is:
 * ```
 * struct ClaimableBalanceEntryExtensionV1
{
union switch (int v)
{
case 0:
void;
}
ext;

uint32 flags; // see ClaimableBalanceFlags
};
 * ```
 */
data class ClaimableBalanceEntryExtensionV1(
    val ext: ClaimableBalanceEntryExtensionV1Ext,
    val flags: Uint32,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        flags.encode(stream)
    }

    companion object : XdrElementDecoder<ClaimableBalanceEntryExtensionV1> {
        override fun decode(stream: XdrInputStream): ClaimableBalanceEntryExtensionV1 {
            val ext = ClaimableBalanceEntryExtensionV1Ext.decode(stream)
            val flags = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            return ClaimableBalanceEntryExtensionV1(
                ext,
                flags,
            )
        }
    }

    /**
     * ClaimableBalanceEntryExtensionV1Ext's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class ClaimableBalanceEntryExtensionV1Ext(val type: Int) : XdrElement {
        data object ClaimableBalanceEntryExtensionV1ExtV0 : ClaimableBalanceEntryExtensionV1Ext(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<ClaimableBalanceEntryExtensionV1Ext> {
            override fun decode(stream: XdrInputStream): ClaimableBalanceEntryExtensionV1Ext {
                return when (val type = Int.decode(stream)) {
                    0 -> ClaimableBalanceEntryExtensionV1ExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
