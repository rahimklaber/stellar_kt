// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SerializedBinaryFuseFilter's original definition in the XDR file is:
 * ```
 * struct SerializedBinaryFuseFilter
{
BinaryFuseFilterType type;

// Seed used to hash input to filter
ShortHashSeed inputHashSeed;

// Seed used for internal filter hash operations
ShortHashSeed filterSeed;
uint32 segmentLength;
uint32 segementLengthMask;
uint32 segmentCount;
uint32 segmentCountLength;
uint32 fingerprintLength; // Length in terms of element count, not bytes

// Array of uint8_t, uint16_t, or uint32_t depending on filter type
opaque fingerprints<>;
};
 * ```
 */
data class SerializedBinaryFuseFilter(
    val type: BinaryFuseFilterType,
    val inputHashSeed: ShortHashSeed,
    val filterSeed: ShortHashSeed,
    val segmentLength: Uint32,
    val segementLengthMask: Uint32,
    val segmentCount: Uint32,
    val segmentCountLength: Uint32,
    val fingerprintLength: Uint32,
    val fingerprints: ByteArray,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        type.encode(stream)
        inputHashSeed.encode(stream)
        filterSeed.encode(stream)
        segmentLength.encode(stream)
        segementLengthMask.encode(stream)
        segmentCount.encode(stream)
        segmentCountLength.encode(stream)
        fingerprintLength.encode(stream)
        val fingerprintsSize = fingerprints.size
        stream.writeInt(fingerprintsSize)
        stream.writeBytes(fingerprints)
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as SerializedBinaryFuseFilter

        if (type != other.type) return false
        if (inputHashSeed != other.inputHashSeed) return false
        if (filterSeed != other.filterSeed) return false
        if (segmentLength != other.segmentLength) return false
        if (segementLengthMask != other.segementLengthMask) return false
        if (segmentCount != other.segmentCount) return false
        if (segmentCountLength != other.segmentCountLength) return false
        if (fingerprintLength != other.fingerprintLength) return false
        if (!fingerprints.contentEquals(other.fingerprints)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = type.hashCode()
        result = 31 * result + inputHashSeed.hashCode()
        result = 31 * result + filterSeed.hashCode()
        result = 31 * result + segmentLength.hashCode()
        result = 31 * result + segementLengthMask.hashCode()
        result = 31 * result + segmentCount.hashCode()
        result = 31 * result + segmentCountLength.hashCode()
        result = 31 * result + fingerprintLength.hashCode()
        result = 31 * result + fingerprints.contentHashCode()
        return result
    }

    companion object : XdrElementDecoder<SerializedBinaryFuseFilter> {
        override fun decode(stream: XdrInputStream): SerializedBinaryFuseFilter {
            val type = BinaryFuseFilterType.decode(stream)
            val inputHashSeed = ShortHashSeed.decode(stream)
            val filterSeed = ShortHashSeed.decode(stream)
            val segmentLength = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val segementLengthMask = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val segmentCount = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val segmentCountLength = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val fingerprintLength = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val fingerprintsSize = stream.readInt()
            val fingerprints = stream.readBytes(fingerprintsSize)
            return SerializedBinaryFuseFilter(
                type,
                inputHashSeed,
                filterSeed,
                segmentLength,
                segementLengthMask,
                segmentCount,
                segmentCountLength,
                fingerprintLength,
                fingerprints,
            )
        }
    }
}
