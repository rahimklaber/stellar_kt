// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ClawbackResult's original definition in the XDR file is:
 * ```
 * union ClawbackResult switch (ClawbackResultCode code)
{
case CLAWBACK_SUCCESS:
void;
case CLAWBACK_MALFORMED:
case CLAWBACK_NOT_CLAWBACK_ENABLED:
case CLAWBACK_NO_TRUST:
case CLAWBACK_UNDERFUNDED:
void;
};
 * ```
 */
sealed class ClawbackResult(val type: ClawbackResultCode) : XdrElement {
    data object ClawbackSuccess : ClawbackResult(ClawbackResultCode.CLAWBACK_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ClawbackMalformed : ClawbackResult(ClawbackResultCode.CLAWBACK_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ClawbackNotClawbackEnabled : ClawbackResult(ClawbackResultCode.CLAWBACK_NOT_CLAWBACK_ENABLED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ClawbackNoTrust : ClawbackResult(ClawbackResultCode.CLAWBACK_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object ClawbackUnderfunded : ClawbackResult(ClawbackResultCode.CLAWBACK_UNDERFUNDED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<ClawbackResult> {
        override fun decode(stream: XdrInputStream): ClawbackResult {
            return when (val type = ClawbackResultCode.decode(stream)) {
                ClawbackResultCode.CLAWBACK_SUCCESS -> ClawbackSuccess
                ClawbackResultCode.CLAWBACK_MALFORMED -> ClawbackMalformed
                ClawbackResultCode.CLAWBACK_NOT_CLAWBACK_ENABLED -> ClawbackNotClawbackEnabled
                ClawbackResultCode.CLAWBACK_NO_TRUST -> ClawbackNoTrust
                ClawbackResultCode.CLAWBACK_UNDERFUNDED -> ClawbackUnderfunded
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
