// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCSpecUDTUnionCaseV0's original definition in the XDR file is:
 * ```
 * union SCSpecUDTUnionCaseV0 switch (SCSpecUDTUnionCaseV0Kind kind)
{
case SC_SPEC_UDT_UNION_CASE_VOID_V0:
SCSpecUDTUnionCaseVoidV0 voidCase;
case SC_SPEC_UDT_UNION_CASE_TUPLE_V0:
SCSpecUDTUnionCaseTupleV0 tupleCase;
};
 * ```
 */
sealed class SCSpecUDTUnionCaseV0(val type: SCSpecUDTUnionCaseV0Kind) : XdrElement {
    fun voidCaseOrNull(): ScSpecUdtUnionCaseVoidV0? = if (this is ScSpecUdtUnionCaseVoidV0) this else null
    data class ScSpecUdtUnionCaseVoidV0(
        val voidCase: SCSpecUDTUnionCaseVoidV0,
    ) : SCSpecUDTUnionCaseV0(SCSpecUDTUnionCaseV0Kind.SC_SPEC_UDT_UNION_CASE_VOID_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            voidCase.encode(stream)
        }
    }

    fun tupleCaseOrNull(): ScSpecUdtUnionCaseTupleV0? = if (this is ScSpecUdtUnionCaseTupleV0) this else null
    data class ScSpecUdtUnionCaseTupleV0(
        val tupleCase: SCSpecUDTUnionCaseTupleV0,
    ) : SCSpecUDTUnionCaseV0(SCSpecUDTUnionCaseV0Kind.SC_SPEC_UDT_UNION_CASE_TUPLE_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            tupleCase.encode(stream)
        }
    }

    companion object : XdrElementDecoder<SCSpecUDTUnionCaseV0> {
        override fun decode(stream: XdrInputStream): SCSpecUDTUnionCaseV0 {
            return when (val type = SCSpecUDTUnionCaseV0Kind.decode(stream)) {
                SCSpecUDTUnionCaseV0Kind.SC_SPEC_UDT_UNION_CASE_VOID_V0 -> {
                    val voidCase = SCSpecUDTUnionCaseVoidV0.decode(stream)
                    ScSpecUdtUnionCaseVoidV0(voidCase)
                }

                SCSpecUDTUnionCaseV0Kind.SC_SPEC_UDT_UNION_CASE_TUPLE_V0 -> {
                    val tupleCase = SCSpecUDTUnionCaseTupleV0.decode(stream)
                    ScSpecUdtUnionCaseTupleV0(tupleCase)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
