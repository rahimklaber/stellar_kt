// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * OperationResult's original definition in the XDR file is:
 * ```
 * union OperationResult switch (OperationResultCode code)
{
case opINNER:
union switch (OperationType type)
{
case CREATE_ACCOUNT:
CreateAccountResult createAccountResult;
case PAYMENT:
PaymentResult paymentResult;
case PATH_PAYMENT_STRICT_RECEIVE:
PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
case MANAGE_SELL_OFFER:
ManageSellOfferResult manageSellOfferResult;
case CREATE_PASSIVE_SELL_OFFER:
ManageSellOfferResult createPassiveSellOfferResult;
case SET_OPTIONS:
SetOptionsResult setOptionsResult;
case CHANGE_TRUST:
ChangeTrustResult changeTrustResult;
case ALLOW_TRUST:
AllowTrustResult allowTrustResult;
case ACCOUNT_MERGE:
AccountMergeResult accountMergeResult;
case INFLATION:
InflationResult inflationResult;
case MANAGE_DATA:
ManageDataResult manageDataResult;
case BUMP_SEQUENCE:
BumpSequenceResult bumpSeqResult;
case MANAGE_BUY_OFFER:
ManageBuyOfferResult manageBuyOfferResult;
case PATH_PAYMENT_STRICT_SEND:
PathPaymentStrictSendResult pathPaymentStrictSendResult;
case CREATE_CLAIMABLE_BALANCE:
CreateClaimableBalanceResult createClaimableBalanceResult;
case CLAIM_CLAIMABLE_BALANCE:
ClaimClaimableBalanceResult claimClaimableBalanceResult;
case BEGIN_SPONSORING_FUTURE_RESERVES:
BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
case END_SPONSORING_FUTURE_RESERVES:
EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
case REVOKE_SPONSORSHIP:
RevokeSponsorshipResult revokeSponsorshipResult;
case CLAWBACK:
ClawbackResult clawbackResult;
case CLAWBACK_CLAIMABLE_BALANCE:
ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
case SET_TRUST_LINE_FLAGS:
SetTrustLineFlagsResult setTrustLineFlagsResult;
case LIQUIDITY_POOL_DEPOSIT:
LiquidityPoolDepositResult liquidityPoolDepositResult;
case LIQUIDITY_POOL_WITHDRAW:
LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
case INVOKE_HOST_FUNCTION:
InvokeHostFunctionResult invokeHostFunctionResult;
case EXTEND_FOOTPRINT_TTL:
ExtendFootprintTTLResult extendFootprintTTLResult;
case RESTORE_FOOTPRINT:
RestoreFootprintResult restoreFootprintResult;
}
tr;
case opBAD_AUTH:
case opNO_ACCOUNT:
case opNOT_SUPPORTED:
case opTOO_MANY_SUBENTRIES:
case opEXCEEDED_WORK_LIMIT:
case opTOO_MANY_SPONSORING:
void;
};
 * ```
 */
sealed class OperationResult(val type: OperationResultCode) : XdrElement {
    fun trOrNull(): Opinner? = if (this is Opinner) this else null
    data class Opinner(
        val tr: OperationResultTr,
    ) : OperationResult(OperationResultCode.opINNER) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            tr.encode(stream)
        }
    }

    data object OpbadAuth : OperationResult(OperationResultCode.opBAD_AUTH) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object OpnoAccount : OperationResult(OperationResultCode.opNO_ACCOUNT) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object OpnotSupported : OperationResult(OperationResultCode.opNOT_SUPPORTED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object OptooManySubentries : OperationResult(OperationResultCode.opTOO_MANY_SUBENTRIES) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object OpexceededWorkLimit : OperationResult(OperationResultCode.opEXCEEDED_WORK_LIMIT) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object OptooManySponsoring : OperationResult(OperationResultCode.opTOO_MANY_SPONSORING) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<OperationResult> {
        override fun decode(stream: XdrInputStream): OperationResult {
            return when (val type = OperationResultCode.decode(stream)) {
                OperationResultCode.opINNER -> {
                    val tr = OperationResultTr.decode(stream)
                    Opinner(tr)
                }

                OperationResultCode.opBAD_AUTH -> OpbadAuth
                OperationResultCode.opNO_ACCOUNT -> OpnoAccount
                OperationResultCode.opNOT_SUPPORTED -> OpnotSupported
                OperationResultCode.opTOO_MANY_SUBENTRIES -> OptooManySubentries
                OperationResultCode.opEXCEEDED_WORK_LIMIT -> OpexceededWorkLimit
                OperationResultCode.opTOO_MANY_SPONSORING -> OptooManySponsoring
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * OperationResultTr's original definition in the XDR file is:
     * ```
     * union switch (OperationType type)
    {
    case CREATE_ACCOUNT:
    CreateAccountResult createAccountResult;
    case PAYMENT:
    PaymentResult paymentResult;
    case PATH_PAYMENT_STRICT_RECEIVE:
    PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
    case MANAGE_SELL_OFFER:
    ManageSellOfferResult manageSellOfferResult;
    case CREATE_PASSIVE_SELL_OFFER:
    ManageSellOfferResult createPassiveSellOfferResult;
    case SET_OPTIONS:
    SetOptionsResult setOptionsResult;
    case CHANGE_TRUST:
    ChangeTrustResult changeTrustResult;
    case ALLOW_TRUST:
    AllowTrustResult allowTrustResult;
    case ACCOUNT_MERGE:
    AccountMergeResult accountMergeResult;
    case INFLATION:
    InflationResult inflationResult;
    case MANAGE_DATA:
    ManageDataResult manageDataResult;
    case BUMP_SEQUENCE:
    BumpSequenceResult bumpSeqResult;
    case MANAGE_BUY_OFFER:
    ManageBuyOfferResult manageBuyOfferResult;
    case PATH_PAYMENT_STRICT_SEND:
    PathPaymentStrictSendResult pathPaymentStrictSendResult;
    case CREATE_CLAIMABLE_BALANCE:
    CreateClaimableBalanceResult createClaimableBalanceResult;
    case CLAIM_CLAIMABLE_BALANCE:
    ClaimClaimableBalanceResult claimClaimableBalanceResult;
    case BEGIN_SPONSORING_FUTURE_RESERVES:
    BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
    case END_SPONSORING_FUTURE_RESERVES:
    EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
    case REVOKE_SPONSORSHIP:
    RevokeSponsorshipResult revokeSponsorshipResult;
    case CLAWBACK:
    ClawbackResult clawbackResult;
    case CLAWBACK_CLAIMABLE_BALANCE:
    ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
    case SET_TRUST_LINE_FLAGS:
    SetTrustLineFlagsResult setTrustLineFlagsResult;
    case LIQUIDITY_POOL_DEPOSIT:
    LiquidityPoolDepositResult liquidityPoolDepositResult;
    case LIQUIDITY_POOL_WITHDRAW:
    LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
    case INVOKE_HOST_FUNCTION:
    InvokeHostFunctionResult invokeHostFunctionResult;
    case EXTEND_FOOTPRINT_TTL:
    ExtendFootprintTTLResult extendFootprintTTLResult;
    case RESTORE_FOOTPRINT:
    RestoreFootprintResult restoreFootprintResult;
    }
     * ```
     */
    sealed class OperationResultTr(val type: OperationType) : XdrElement {
        fun createAccountResultOrNull(): CreateAccount? = if (this is CreateAccount) this else null
        data class CreateAccount(
            val createAccountResult: CreateAccountResult,
        ) : OperationResultTr(OperationType.CREATE_ACCOUNT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                createAccountResult.encode(stream)
            }
        }

        fun paymentResultOrNull(): Payment? = if (this is Payment) this else null
        data class Payment(
            val paymentResult: PaymentResult,
        ) : OperationResultTr(OperationType.PAYMENT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                paymentResult.encode(stream)
            }
        }

        fun pathPaymentStrictReceiveResultOrNull(): PathPaymentStrictReceive? = if (this is PathPaymentStrictReceive) this else null
        data class PathPaymentStrictReceive(
            val pathPaymentStrictReceiveResult: PathPaymentStrictReceiveResult,
        ) : OperationResultTr(OperationType.PATH_PAYMENT_STRICT_RECEIVE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                pathPaymentStrictReceiveResult.encode(stream)
            }
        }

        fun manageSellOfferResultOrNull(): ManageSellOffer? = if (this is ManageSellOffer) this else null
        data class ManageSellOffer(
            val manageSellOfferResult: ManageSellOfferResult,
        ) : OperationResultTr(OperationType.MANAGE_SELL_OFFER) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                manageSellOfferResult.encode(stream)
            }
        }

        fun createPassiveSellOfferResultOrNull(): CreatePassiveSellOffer? = if (this is CreatePassiveSellOffer) this else null
        data class CreatePassiveSellOffer(
            val createPassiveSellOfferResult: ManageSellOfferResult,
        ) : OperationResultTr(OperationType.CREATE_PASSIVE_SELL_OFFER) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                createPassiveSellOfferResult.encode(stream)
            }
        }

        fun setOptionsResultOrNull(): SetOptions? = if (this is SetOptions) this else null
        data class SetOptions(
            val setOptionsResult: SetOptionsResult,
        ) : OperationResultTr(OperationType.SET_OPTIONS) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                setOptionsResult.encode(stream)
            }
        }

        fun changeTrustResultOrNull(): ChangeTrust? = if (this is ChangeTrust) this else null
        data class ChangeTrust(
            val changeTrustResult: ChangeTrustResult,
        ) : OperationResultTr(OperationType.CHANGE_TRUST) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                changeTrustResult.encode(stream)
            }
        }

        fun allowTrustResultOrNull(): AllowTrust? = if (this is AllowTrust) this else null
        data class AllowTrust(
            val allowTrustResult: AllowTrustResult,
        ) : OperationResultTr(OperationType.ALLOW_TRUST) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                allowTrustResult.encode(stream)
            }
        }

        fun accountMergeResultOrNull(): AccountMerge? = if (this is AccountMerge) this else null
        data class AccountMerge(
            val accountMergeResult: AccountMergeResult,
        ) : OperationResultTr(OperationType.ACCOUNT_MERGE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                accountMergeResult.encode(stream)
            }
        }

        fun inflationResultOrNull(): Inflation? = if (this is Inflation) this else null
        data class Inflation(
            val inflationResult: InflationResult,
        ) : OperationResultTr(OperationType.INFLATION) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                inflationResult.encode(stream)
            }
        }

        fun manageDataResultOrNull(): ManageData? = if (this is ManageData) this else null
        data class ManageData(
            val manageDataResult: ManageDataResult,
        ) : OperationResultTr(OperationType.MANAGE_DATA) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                manageDataResult.encode(stream)
            }
        }

        fun bumpSeqResultOrNull(): BumpSequence? = if (this is BumpSequence) this else null
        data class BumpSequence(
            val bumpSeqResult: BumpSequenceResult,
        ) : OperationResultTr(OperationType.BUMP_SEQUENCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                bumpSeqResult.encode(stream)
            }
        }

        fun manageBuyOfferResultOrNull(): ManageBuyOffer? = if (this is ManageBuyOffer) this else null
        data class ManageBuyOffer(
            val manageBuyOfferResult: ManageBuyOfferResult,
        ) : OperationResultTr(OperationType.MANAGE_BUY_OFFER) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                manageBuyOfferResult.encode(stream)
            }
        }

        fun pathPaymentStrictSendResultOrNull(): PathPaymentStrictSend? = if (this is PathPaymentStrictSend) this else null
        data class PathPaymentStrictSend(
            val pathPaymentStrictSendResult: PathPaymentStrictSendResult,
        ) : OperationResultTr(OperationType.PATH_PAYMENT_STRICT_SEND) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                pathPaymentStrictSendResult.encode(stream)
            }
        }

        fun createClaimableBalanceResultOrNull(): CreateClaimableBalance? = if (this is CreateClaimableBalance) this else null
        data class CreateClaimableBalance(
            val createClaimableBalanceResult: CreateClaimableBalanceResult,
        ) : OperationResultTr(OperationType.CREATE_CLAIMABLE_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                createClaimableBalanceResult.encode(stream)
            }
        }

        fun claimClaimableBalanceResultOrNull(): ClaimClaimableBalance? = if (this is ClaimClaimableBalance) this else null
        data class ClaimClaimableBalance(
            val claimClaimableBalanceResult: ClaimClaimableBalanceResult,
        ) : OperationResultTr(OperationType.CLAIM_CLAIMABLE_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                claimClaimableBalanceResult.encode(stream)
            }
        }

        fun beginSponsoringFutureReservesResultOrNull(): BeginSponsoringFutureReserves? = if (this is BeginSponsoringFutureReserves) this else null
        data class BeginSponsoringFutureReserves(
            val beginSponsoringFutureReservesResult: BeginSponsoringFutureReservesResult,
        ) : OperationResultTr(OperationType.BEGIN_SPONSORING_FUTURE_RESERVES) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                beginSponsoringFutureReservesResult.encode(stream)
            }
        }

        fun endSponsoringFutureReservesResultOrNull(): EndSponsoringFutureReserves? = if (this is EndSponsoringFutureReserves) this else null
        data class EndSponsoringFutureReserves(
            val endSponsoringFutureReservesResult: EndSponsoringFutureReservesResult,
        ) : OperationResultTr(OperationType.END_SPONSORING_FUTURE_RESERVES) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                endSponsoringFutureReservesResult.encode(stream)
            }
        }

        fun revokeSponsorshipResultOrNull(): RevokeSponsorship? = if (this is RevokeSponsorship) this else null
        data class RevokeSponsorship(
            val revokeSponsorshipResult: RevokeSponsorshipResult,
        ) : OperationResultTr(OperationType.REVOKE_SPONSORSHIP) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                revokeSponsorshipResult.encode(stream)
            }
        }

        fun clawbackResultOrNull(): Clawback? = if (this is Clawback) this else null
        data class Clawback(
            val clawbackResult: ClawbackResult,
        ) : OperationResultTr(OperationType.CLAWBACK) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                clawbackResult.encode(stream)
            }
        }

        fun clawbackClaimableBalanceResultOrNull(): ClawbackClaimableBalance? = if (this is ClawbackClaimableBalance) this else null
        data class ClawbackClaimableBalance(
            val clawbackClaimableBalanceResult: ClawbackClaimableBalanceResult,
        ) : OperationResultTr(OperationType.CLAWBACK_CLAIMABLE_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                clawbackClaimableBalanceResult.encode(stream)
            }
        }

        fun setTrustLineFlagsResultOrNull(): SetTrustLineFlags? = if (this is SetTrustLineFlags) this else null
        data class SetTrustLineFlags(
            val setTrustLineFlagsResult: SetTrustLineFlagsResult,
        ) : OperationResultTr(OperationType.SET_TRUST_LINE_FLAGS) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                setTrustLineFlagsResult.encode(stream)
            }
        }

        fun liquidityPoolDepositResultOrNull(): LiquidityPoolDeposit? = if (this is LiquidityPoolDeposit) this else null
        data class LiquidityPoolDeposit(
            val liquidityPoolDepositResult: LiquidityPoolDepositResult,
        ) : OperationResultTr(OperationType.LIQUIDITY_POOL_DEPOSIT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                liquidityPoolDepositResult.encode(stream)
            }
        }

        fun liquidityPoolWithdrawResultOrNull(): LiquidityPoolWithdraw? = if (this is LiquidityPoolWithdraw) this else null
        data class LiquidityPoolWithdraw(
            val liquidityPoolWithdrawResult: LiquidityPoolWithdrawResult,
        ) : OperationResultTr(OperationType.LIQUIDITY_POOL_WITHDRAW) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                liquidityPoolWithdrawResult.encode(stream)
            }
        }

        fun invokeHostFunctionResultOrNull(): InvokeHostFunction? = if (this is InvokeHostFunction) this else null
        data class InvokeHostFunction(
            val invokeHostFunctionResult: InvokeHostFunctionResult,
        ) : OperationResultTr(OperationType.INVOKE_HOST_FUNCTION) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                invokeHostFunctionResult.encode(stream)
            }
        }

        fun extendFootprintTTLResultOrNull(): ExtendFootprintTtl? = if (this is ExtendFootprintTtl) this else null
        data class ExtendFootprintTtl(
            val extendFootprintTTLResult: ExtendFootprintTTLResult,
        ) : OperationResultTr(OperationType.EXTEND_FOOTPRINT_TTL) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                extendFootprintTTLResult.encode(stream)
            }
        }

        fun restoreFootprintResultOrNull(): RestoreFootprint? = if (this is RestoreFootprint) this else null
        data class RestoreFootprint(
            val restoreFootprintResult: RestoreFootprintResult,
        ) : OperationResultTr(OperationType.RESTORE_FOOTPRINT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                restoreFootprintResult.encode(stream)
            }
        }

        companion object : XdrElementDecoder<OperationResultTr> {
            override fun decode(stream: XdrInputStream): OperationResultTr {
                return when (val type = OperationType.decode(stream)) {
                    OperationType.CREATE_ACCOUNT -> {
                        val createAccountResult = CreateAccountResult.decode(stream)
                        CreateAccount(createAccountResult)
                    }

                    OperationType.PAYMENT -> {
                        val paymentResult = PaymentResult.decode(stream)
                        Payment(paymentResult)
                    }

                    OperationType.PATH_PAYMENT_STRICT_RECEIVE -> {
                        val pathPaymentStrictReceiveResult = PathPaymentStrictReceiveResult.decode(stream)
                        PathPaymentStrictReceive(pathPaymentStrictReceiveResult)
                    }

                    OperationType.MANAGE_SELL_OFFER -> {
                        val manageSellOfferResult = ManageSellOfferResult.decode(stream)
                        ManageSellOffer(manageSellOfferResult)
                    }

                    OperationType.CREATE_PASSIVE_SELL_OFFER -> {
                        val createPassiveSellOfferResult = ManageSellOfferResult.decode(stream)
                        CreatePassiveSellOffer(createPassiveSellOfferResult)
                    }

                    OperationType.SET_OPTIONS -> {
                        val setOptionsResult = SetOptionsResult.decode(stream)
                        SetOptions(setOptionsResult)
                    }

                    OperationType.CHANGE_TRUST -> {
                        val changeTrustResult = ChangeTrustResult.decode(stream)
                        ChangeTrust(changeTrustResult)
                    }

                    OperationType.ALLOW_TRUST -> {
                        val allowTrustResult = AllowTrustResult.decode(stream)
                        AllowTrust(allowTrustResult)
                    }

                    OperationType.ACCOUNT_MERGE -> {
                        val accountMergeResult = AccountMergeResult.decode(stream)
                        AccountMerge(accountMergeResult)
                    }

                    OperationType.INFLATION -> {
                        val inflationResult = InflationResult.decode(stream)
                        Inflation(inflationResult)
                    }

                    OperationType.MANAGE_DATA -> {
                        val manageDataResult = ManageDataResult.decode(stream)
                        ManageData(manageDataResult)
                    }

                    OperationType.BUMP_SEQUENCE -> {
                        val bumpSeqResult = BumpSequenceResult.decode(stream)
                        BumpSequence(bumpSeqResult)
                    }

                    OperationType.MANAGE_BUY_OFFER -> {
                        val manageBuyOfferResult = ManageBuyOfferResult.decode(stream)
                        ManageBuyOffer(manageBuyOfferResult)
                    }

                    OperationType.PATH_PAYMENT_STRICT_SEND -> {
                        val pathPaymentStrictSendResult = PathPaymentStrictSendResult.decode(stream)
                        PathPaymentStrictSend(pathPaymentStrictSendResult)
                    }

                    OperationType.CREATE_CLAIMABLE_BALANCE -> {
                        val createClaimableBalanceResult = CreateClaimableBalanceResult.decode(stream)
                        CreateClaimableBalance(createClaimableBalanceResult)
                    }

                    OperationType.CLAIM_CLAIMABLE_BALANCE -> {
                        val claimClaimableBalanceResult = ClaimClaimableBalanceResult.decode(stream)
                        ClaimClaimableBalance(claimClaimableBalanceResult)
                    }

                    OperationType.BEGIN_SPONSORING_FUTURE_RESERVES -> {
                        val beginSponsoringFutureReservesResult = BeginSponsoringFutureReservesResult.decode(stream)
                        BeginSponsoringFutureReserves(beginSponsoringFutureReservesResult)
                    }

                    OperationType.END_SPONSORING_FUTURE_RESERVES -> {
                        val endSponsoringFutureReservesResult = EndSponsoringFutureReservesResult.decode(stream)
                        EndSponsoringFutureReserves(endSponsoringFutureReservesResult)
                    }

                    OperationType.REVOKE_SPONSORSHIP -> {
                        val revokeSponsorshipResult = RevokeSponsorshipResult.decode(stream)
                        RevokeSponsorship(revokeSponsorshipResult)
                    }

                    OperationType.CLAWBACK -> {
                        val clawbackResult = ClawbackResult.decode(stream)
                        Clawback(clawbackResult)
                    }

                    OperationType.CLAWBACK_CLAIMABLE_BALANCE -> {
                        val clawbackClaimableBalanceResult = ClawbackClaimableBalanceResult.decode(stream)
                        ClawbackClaimableBalance(clawbackClaimableBalanceResult)
                    }

                    OperationType.SET_TRUST_LINE_FLAGS -> {
                        val setTrustLineFlagsResult = SetTrustLineFlagsResult.decode(stream)
                        SetTrustLineFlags(setTrustLineFlagsResult)
                    }

                    OperationType.LIQUIDITY_POOL_DEPOSIT -> {
                        val liquidityPoolDepositResult = LiquidityPoolDepositResult.decode(stream)
                        LiquidityPoolDeposit(liquidityPoolDepositResult)
                    }

                    OperationType.LIQUIDITY_POOL_WITHDRAW -> {
                        val liquidityPoolWithdrawResult = LiquidityPoolWithdrawResult.decode(stream)
                        LiquidityPoolWithdraw(liquidityPoolWithdrawResult)
                    }

                    OperationType.INVOKE_HOST_FUNCTION -> {
                        val invokeHostFunctionResult = InvokeHostFunctionResult.decode(stream)
                        InvokeHostFunction(invokeHostFunctionResult)
                    }

                    OperationType.EXTEND_FOOTPRINT_TTL -> {
                        val extendFootprintTTLResult = ExtendFootprintTTLResult.decode(stream)
                        ExtendFootprintTtl(extendFootprintTTLResult)
                    }

                    OperationType.RESTORE_FOOTPRINT -> {
                        val restoreFootprintResult = RestoreFootprintResult.decode(stream)
                        RestoreFootprint(restoreFootprintResult)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
