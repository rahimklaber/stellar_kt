// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LedgerCloseMetaV0's original definition in the XDR file is:
 * ```
 * struct LedgerCloseMetaV0
{
LedgerHeaderHistoryEntry ledgerHeader;
// NB: txSet is sorted in "Hash order"
TransactionSet txSet;

// NB: transactions are sorted in apply order here
// fees for all transactions are processed first
// followed by applying transactions
TransactionResultMeta txProcessing<>;

// upgrades are applied last
UpgradeEntryMeta upgradesProcessing<>;

// other misc information attached to the ledger close
SCPHistoryEntry scpInfo<>;
};
 * ```
 */
data class LedgerCloseMetaV0(
    val ledgerHeader: LedgerHeaderHistoryEntry,
    val txSet: TransactionSet,
    val txProcessing: List<TransactionResultMeta>,
    val upgradesProcessing: List<UpgradeEntryMeta>,
    val scpInfo: List<SCPHistoryEntry>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ledgerHeader.encode(stream)
        txSet.encode(stream)
        val txProcessingSize = txProcessing.size
        stream.writeInt(txProcessingSize)
        txProcessing.encodeXdrElements(stream)
        val upgradesProcessingSize = upgradesProcessing.size
        stream.writeInt(upgradesProcessingSize)
        upgradesProcessing.encodeXdrElements(stream)
        val scpInfoSize = scpInfo.size
        stream.writeInt(scpInfoSize)
        scpInfo.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<LedgerCloseMetaV0> {
        override fun decode(stream: XdrInputStream): LedgerCloseMetaV0 {
            val ledgerHeader = LedgerHeaderHistoryEntry.decode(stream)
            val txSet = TransactionSet.decode(stream)
            val txProcessingSize = stream.readInt()
            val txProcessing: List<TransactionResultMeta> = decodeXdrElementsList(txProcessingSize, stream, TransactionResultMeta.decoder())
            val upgradesProcessingSize = stream.readInt()
            val upgradesProcessing: List<UpgradeEntryMeta> = decodeXdrElementsList(upgradesProcessingSize, stream, UpgradeEntryMeta.decoder())
            val scpInfoSize = stream.readInt()
            val scpInfo: List<SCPHistoryEntry> = decodeXdrElementsList(scpInfoSize, stream, SCPHistoryEntry.decoder())
            return LedgerCloseMetaV0(
                ledgerHeader,
                txSet,
                txProcessing,
                upgradesProcessing,
                scpInfo,
            )
        }
    }
}
