// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * AccountEntryExtensionV1's original definition in the XDR file is:
 * ```
 * struct AccountEntryExtensionV1
{
Liabilities liabilities;

union switch (int v)
{
case 0:
void;
case 2:
AccountEntryExtensionV2 v2;
}
ext;
};
 * ```
 */
data class AccountEntryExtensionV1(
    val liabilities: Liabilities,
    val ext: AccountEntryExtensionV1Ext,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        liabilities.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<AccountEntryExtensionV1> {
        override fun decode(stream: XdrInputStream): AccountEntryExtensionV1 {
            val liabilities = Liabilities.decode(stream)
            val ext = AccountEntryExtensionV1Ext.decode(stream)
            return AccountEntryExtensionV1(
                liabilities,
                ext,
            )
        }
    }

    /**
     * AccountEntryExtensionV1Ext's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    case 2:
    AccountEntryExtensionV2 v2;
    }
     * ```
     */
    sealed class AccountEntryExtensionV1Ext(val type: Int) : XdrElement {
        data object AccountEntryExtensionV1ExtV0 : AccountEntryExtensionV1Ext(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun v2OrNull(): AccountEntryExtensionV1ExtV2? = if (this is AccountEntryExtensionV1ExtV2) this else null
        data class AccountEntryExtensionV1ExtV2(
            val v2: AccountEntryExtensionV2,
        ) : AccountEntryExtensionV1Ext(2) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                v2.encode(stream)
            }
        }

        companion object : XdrElementDecoder<AccountEntryExtensionV1Ext> {
            override fun decode(stream: XdrInputStream): AccountEntryExtensionV1Ext {
                return when (val type = Int.decode(stream)) {
                    0 -> AccountEntryExtensionV1ExtV0
                    2 -> {
                        val v2 = AccountEntryExtensionV2.decode(stream)
                        AccountEntryExtensionV1ExtV2(v2)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
