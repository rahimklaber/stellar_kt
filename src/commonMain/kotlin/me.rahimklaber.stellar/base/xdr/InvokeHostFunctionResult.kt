// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * InvokeHostFunctionResult's original definition in the XDR file is:
 * ```
 * union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)
{
case INVOKE_HOST_FUNCTION_SUCCESS:
Hash success; // sha256(InvokeHostFunctionSuccessPreImage)
case INVOKE_HOST_FUNCTION_MALFORMED:
case INVOKE_HOST_FUNCTION_TRAPPED:
case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:
case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:
void;
};
 * ```
 */
sealed class InvokeHostFunctionResult(val type: InvokeHostFunctionResultCode) : XdrElement {
    fun successOrNull(): InvokeHostFunctionSuccess? = if (this is InvokeHostFunctionSuccess) this else null
    data class InvokeHostFunctionSuccess(
        val success: Hash,
    ) : InvokeHostFunctionResult(InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            success.encode(stream)
        }
    }

    data object InvokeHostFunctionMalformed : InvokeHostFunctionResult(InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object InvokeHostFunctionTrapped : InvokeHostFunctionResult(InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_TRAPPED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object InvokeHostFunctionResourceLimitExceeded :
        InvokeHostFunctionResult(InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object InvokeHostFunctionEntryArchived : InvokeHostFunctionResult(InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object InvokeHostFunctionInsufficientRefundableFee :
        InvokeHostFunctionResult(InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<InvokeHostFunctionResult> {
        override fun decode(stream: XdrInputStream): InvokeHostFunctionResult {
            return when (val type = InvokeHostFunctionResultCode.decode(stream)) {
                InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_SUCCESS -> {
                    val success = Hash.decode(stream)
                    InvokeHostFunctionSuccess(success)
                }

                InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_MALFORMED -> InvokeHostFunctionMalformed
                InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_TRAPPED -> InvokeHostFunctionTrapped
                InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED -> InvokeHostFunctionResourceLimitExceeded
                InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED -> InvokeHostFunctionEntryArchived
                InvokeHostFunctionResultCode.INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE -> InvokeHostFunctionInsufficientRefundableFee
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
