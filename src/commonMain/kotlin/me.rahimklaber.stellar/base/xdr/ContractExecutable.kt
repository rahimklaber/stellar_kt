// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ContractExecutable's original definition in the XDR file is:
 * ```
 * union ContractExecutable switch (ContractExecutableType type)
{
case CONTRACT_EXECUTABLE_WASM:
Hash wasm_hash;
case CONTRACT_EXECUTABLE_STELLAR_ASSET:
void;
};
 * ```
 */
sealed class ContractExecutable(val type: ContractExecutableType) : XdrElement {
    fun wasmHashOrNull(): Wasm? = if (this is Wasm) this else null
    data class Wasm(
        val wasmHash: Hash,
    ) : ContractExecutable(ContractExecutableType.CONTRACT_EXECUTABLE_WASM) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            wasmHash.encode(stream)
        }
    }

    data object StellarAsset : ContractExecutable(ContractExecutableType.CONTRACT_EXECUTABLE_STELLAR_ASSET) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<ContractExecutable> {
        override fun decode(stream: XdrInputStream): ContractExecutable {
            return when (val type = ContractExecutableType.decode(stream)) {
                ContractExecutableType.CONTRACT_EXECUTABLE_WASM -> {
                    val wasm_hash = Hash.decode(stream)
                    Wasm(wasm_hash)
                }

                ContractExecutableType.CONTRACT_EXECUTABLE_STELLAR_ASSET -> StellarAsset
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
