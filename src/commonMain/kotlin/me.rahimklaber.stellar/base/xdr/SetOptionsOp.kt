// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SetOptionsOp's original definition in the XDR file is:
 * ```
 * struct SetOptionsOp
{
AccountID* inflationDest; // sets the inflation destination

uint32* clearFlags; // which flags to clear
uint32* setFlags;   // which flags to set

// account threshold manipulation
uint32* masterWeight; // weight of the master account
uint32* lowThreshold;
uint32* medThreshold;
uint32* highThreshold;

string32* homeDomain; // sets the home domain

// Add, update or remove a signer for the account
// signer is deleted if the weight is 0
Signer* signer;
};
 * ```
 */
data class SetOptionsOp(
    val inflationDest: AccountID?,
    val clearFlags: Uint32?,
    val setFlags: Uint32?,
    val masterWeight: Uint32?,
    val lowThreshold: Uint32?,
    val medThreshold: Uint32?,
    val highThreshold: Uint32?,
    val homeDomain: String32?,
    val signer: Signer?,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        if (inflationDest != null) {
            stream.writeInt(1)
            inflationDest.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (clearFlags != null) {
            stream.writeInt(1)
            clearFlags.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (setFlags != null) {
            stream.writeInt(1)
            setFlags.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (masterWeight != null) {
            stream.writeInt(1)
            masterWeight.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (lowThreshold != null) {
            stream.writeInt(1)
            lowThreshold.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (medThreshold != null) {
            stream.writeInt(1)
            medThreshold.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (highThreshold != null) {
            stream.writeInt(1)
            highThreshold.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (homeDomain != null) {
            stream.writeInt(1)
            homeDomain.encode(stream)
        } else {
            stream.writeInt(0)
        }
        if (signer != null) {
            stream.writeInt(1)
            signer.encode(stream)
        } else {
            stream.writeInt(0)
        }
    }

    companion object : XdrElementDecoder<SetOptionsOp> {
        override fun decode(stream: XdrInputStream): SetOptionsOp {
            val inflationDestPresent = stream.readInt()
            val inflationDest = if (inflationDestPresent != 0) {
                AccountID.decode(stream)
            } else {
                null
            }
            val clearFlagsPresent = stream.readInt()
            val clearFlags = if (clearFlagsPresent != 0) {
                me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            } else {
                null
            }
            val setFlagsPresent = stream.readInt()
            val setFlags = if (setFlagsPresent != 0) {
                me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            } else {
                null
            }
            val masterWeightPresent = stream.readInt()
            val masterWeight = if (masterWeightPresent != 0) {
                me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            } else {
                null
            }
            val lowThresholdPresent = stream.readInt()
            val lowThreshold = if (lowThresholdPresent != 0) {
                me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            } else {
                null
            }
            val medThresholdPresent = stream.readInt()
            val medThreshold = if (medThresholdPresent != 0) {
                me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            } else {
                null
            }
            val highThresholdPresent = stream.readInt()
            val highThreshold = if (highThresholdPresent != 0) {
                me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            } else {
                null
            }
            val homeDomainPresent = stream.readInt()
            val homeDomain = if (homeDomainPresent != 0) {
                String32.decode(stream)
            } else {
                null
            }
            val signerPresent = stream.readInt()
            val signer = if (signerPresent != 0) {
                Signer.decode(stream)
            } else {
                null
            }
            return SetOptionsOp(
                inflationDest,
                clearFlags,
                setFlags,
                masterWeight,
                lowThreshold,
                medThreshold,
                highThreshold,
                homeDomain,
                signer,
            )
        }
    }
}
