// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ConfigSettingContractBandwidthV0's original definition in the XDR file is:
 * ```
 * struct ConfigSettingContractBandwidthV0
{
// Maximum sum of all transaction sizes in the ledger in bytes
uint32 ledgerMaxTxsSizeBytes;
// Maximum size in bytes for a transaction
uint32 txMaxSizeBytes;

// Fee for 1 KB of transaction size
int64 feeTxSize1KB;
};
 * ```
 */
data class ConfigSettingContractBandwidthV0(
    val ledgerMaxTxsSizeBytes: Uint32,
    val txMaxSizeBytes: Uint32,
    val feeTxSize1KB: Int64,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ledgerMaxTxsSizeBytes.encode(stream)
        txMaxSizeBytes.encode(stream)
        feeTxSize1KB.encode(stream)
    }

    companion object : XdrElementDecoder<ConfigSettingContractBandwidthV0> {
        override fun decode(stream: XdrInputStream): ConfigSettingContractBandwidthV0 {
            val ledgerMaxTxsSizeBytes = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val txMaxSizeBytes = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val feeTxSize1KB = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            return ConfigSettingContractBandwidthV0(
                ledgerMaxTxsSizeBytes,
                txMaxSizeBytes,
                feeTxSize1KB,
            )
        }
    }
}
