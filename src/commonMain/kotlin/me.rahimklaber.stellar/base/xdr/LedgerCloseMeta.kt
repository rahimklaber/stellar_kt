// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * LedgerCloseMeta's original definition in the XDR file is:
 * ```
 * union LedgerCloseMeta switch (int v)
{
case 0:
LedgerCloseMetaV0 v0;
case 1:
LedgerCloseMetaV1 v1;
};
 * ```
 */
sealed class LedgerCloseMeta(val type: Int) : XdrElement {
    fun v0OrNull(): LedgerCloseMetaV0? = if (this is LedgerCloseMetaV0) this else null
    data class LedgerCloseMetaV0(
        val v0: me.rahimklaber.stellar.base.xdr.LedgerCloseMetaV0,
    ) : LedgerCloseMeta(0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v0.encode(stream)
        }
    }

    fun v1OrNull(): LedgerCloseMetaV1? = if (this is LedgerCloseMetaV1) this else null
    data class LedgerCloseMetaV1(
        val v1: me.rahimklaber.stellar.base.xdr.LedgerCloseMetaV1,
    ) : LedgerCloseMeta(1) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v1.encode(stream)
        }
    }

    companion object : XdrElementDecoder<LedgerCloseMeta> {
        override fun decode(stream: XdrInputStream): LedgerCloseMeta {
            return when (val type = Int.decode(stream)) {
                0 -> {
                    val v0 = me.rahimklaber.stellar.base.xdr.LedgerCloseMetaV0.decode(stream)
                    LedgerCloseMetaV0(v0)
                }

                1 -> {
                    val v1 = me.rahimklaber.stellar.base.xdr.LedgerCloseMetaV1.decode(stream)
                    LedgerCloseMetaV1(v1)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
