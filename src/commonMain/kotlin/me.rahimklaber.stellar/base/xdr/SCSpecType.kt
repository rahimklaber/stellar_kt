// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCSpecType's original definition in the XDR file is:
 * ```
 * enum SCSpecType
{
SC_SPEC_TYPE_VAL = 0,

// Types with no parameters.
SC_SPEC_TYPE_BOOL = 1,
SC_SPEC_TYPE_VOID = 2,
SC_SPEC_TYPE_ERROR = 3,
SC_SPEC_TYPE_U32 = 4,
SC_SPEC_TYPE_I32 = 5,
SC_SPEC_TYPE_U64 = 6,
SC_SPEC_TYPE_I64 = 7,
SC_SPEC_TYPE_TIMEPOINT = 8,
SC_SPEC_TYPE_DURATION = 9,
SC_SPEC_TYPE_U128 = 10,
SC_SPEC_TYPE_I128 = 11,
SC_SPEC_TYPE_U256 = 12,
SC_SPEC_TYPE_I256 = 13,
SC_SPEC_TYPE_BYTES = 14,
SC_SPEC_TYPE_STRING = 16,
SC_SPEC_TYPE_SYMBOL = 17,
SC_SPEC_TYPE_ADDRESS = 19,

// Types with parameters.
SC_SPEC_TYPE_OPTION = 1000,
SC_SPEC_TYPE_RESULT = 1001,
SC_SPEC_TYPE_VEC = 1002,
SC_SPEC_TYPE_MAP = 1004,
SC_SPEC_TYPE_TUPLE = 1005,
SC_SPEC_TYPE_BYTES_N = 1006,

// User defined types.
SC_SPEC_TYPE_UDT = 2000
};
 * ```
 */
enum class SCSpecType(val value: Int) : XdrElement {
    SC_SPEC_TYPE_VAL(0),
    SC_SPEC_TYPE_BOOL(1),
    SC_SPEC_TYPE_VOID(2),
    SC_SPEC_TYPE_ERROR(3),
    SC_SPEC_TYPE_U32(4),
    SC_SPEC_TYPE_I32(5),
    SC_SPEC_TYPE_U64(6),
    SC_SPEC_TYPE_I64(7),
    SC_SPEC_TYPE_TIMEPOINT(8),
    SC_SPEC_TYPE_DURATION(9),
    SC_SPEC_TYPE_U128(10),
    SC_SPEC_TYPE_I128(11),
    SC_SPEC_TYPE_U256(12),
    SC_SPEC_TYPE_I256(13),
    SC_SPEC_TYPE_BYTES(14),
    SC_SPEC_TYPE_STRING(16),
    SC_SPEC_TYPE_SYMBOL(17),
    SC_SPEC_TYPE_ADDRESS(19),
    SC_SPEC_TYPE_OPTION(1000),
    SC_SPEC_TYPE_RESULT(1001),
    SC_SPEC_TYPE_VEC(1002),
    SC_SPEC_TYPE_MAP(1004),
    SC_SPEC_TYPE_TUPLE(1005),
    SC_SPEC_TYPE_BYTES_N(1006),
    SC_SPEC_TYPE_UDT(2000);

    companion object : XdrElementDecoder<SCSpecType> {
        override fun decode(stream: XdrInputStream): SCSpecType {
            return when (val value = stream.readInt()) {
                0 -> SC_SPEC_TYPE_VAL
                1 -> SC_SPEC_TYPE_BOOL
                2 -> SC_SPEC_TYPE_VOID
                3 -> SC_SPEC_TYPE_ERROR
                4 -> SC_SPEC_TYPE_U32
                5 -> SC_SPEC_TYPE_I32
                6 -> SC_SPEC_TYPE_U64
                7 -> SC_SPEC_TYPE_I64
                8 -> SC_SPEC_TYPE_TIMEPOINT
                9 -> SC_SPEC_TYPE_DURATION
                10 -> SC_SPEC_TYPE_U128
                11 -> SC_SPEC_TYPE_I128
                12 -> SC_SPEC_TYPE_U256
                13 -> SC_SPEC_TYPE_I256
                14 -> SC_SPEC_TYPE_BYTES
                16 -> SC_SPEC_TYPE_STRING
                17 -> SC_SPEC_TYPE_SYMBOL
                19 -> SC_SPEC_TYPE_ADDRESS
                1000 -> SC_SPEC_TYPE_OPTION
                1001 -> SC_SPEC_TYPE_RESULT
                1002 -> SC_SPEC_TYPE_VEC
                1004 -> SC_SPEC_TYPE_MAP
                1005 -> SC_SPEC_TYPE_TUPLE
                1006 -> SC_SPEC_TYPE_BYTES_N
                2000 -> SC_SPEC_TYPE_UDT
                else -> throw IllegalArgumentException("Unknown enum value: " + value)
            }
        }
    }

    override fun encode(stream: XdrOutputStream) {
        stream.writeInt(value)
    }
}
