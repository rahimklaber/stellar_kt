// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SorobanTransactionData's original definition in the XDR file is:
 * ```
 * struct SorobanTransactionData
{
ExtensionPoint ext;
SorobanResources resources;
// Amount of the transaction `fee` allocated to the Soroban resource fees.
// The fraction of `resourceFee` corresponding to `resources` specified
// above is *not* refundable (i.e. fees for instructions, ledger I/O), as
// well as fees for the transaction size.
// The remaining part of the fee is refundable and the charged value is
// based on the actual consumption of refundable resources (events, ledger
// rent bumps).
// The `inclusionFee` used for prioritization of the transaction is defined
// as `tx.fee - resourceFee`.
int64 resourceFee;
};
 * ```
 */
data class SorobanTransactionData(
    val ext: ExtensionPoint,
    val resources: SorobanResources,
    val resourceFee: Int64,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        resources.encode(stream)
        resourceFee.encode(stream)
    }

    companion object : XdrElementDecoder<SorobanTransactionData> {
        override fun decode(stream: XdrInputStream): SorobanTransactionData {
            val ext = ExtensionPoint.decode(stream)
            val resources = SorobanResources.decode(stream)
            val resourceFee = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            return SorobanTransactionData(
                ext,
                resources,
                resourceFee,
            )
        }
    }
}
