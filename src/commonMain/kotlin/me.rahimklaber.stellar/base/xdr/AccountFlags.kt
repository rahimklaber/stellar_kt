// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * AccountFlags's original definition in the XDR file is:
 * ```
 * enum AccountFlags
{ // masks for each flag

// Flags set on issuer accounts
// TrustLines are created with authorized set to "false" requiring
// the issuer to set it for each TrustLine
AUTH_REQUIRED_FLAG = 0x1,
// If set, the authorized flag in TrustLines can be cleared
// otherwise, authorization cannot be revoked
AUTH_REVOCABLE_FLAG = 0x2,
// Once set, causes all AUTH_* flags to be read-only
AUTH_IMMUTABLE_FLAG = 0x4,
// Trustlines are created with clawback enabled set to "true",
// and claimable balances created from those trustlines are created
// with clawback enabled set to "true"
AUTH_CLAWBACK_ENABLED_FLAG = 0x8
};
 * ```
 */
enum class AccountFlags(val value: Int) : XdrElement {
    AUTH_REQUIRED_FLAG(1),
    AUTH_REVOCABLE_FLAG(2),
    AUTH_IMMUTABLE_FLAG(4),
    AUTH_CLAWBACK_ENABLED_FLAG(8);

    companion object : XdrElementDecoder<AccountFlags> {
        override fun decode(stream: XdrInputStream): AccountFlags {
            return when (val value = stream.readInt()) {
                1 -> AUTH_REQUIRED_FLAG
                2 -> AUTH_REVOCABLE_FLAG
                4 -> AUTH_IMMUTABLE_FLAG
                8 -> AUTH_CLAWBACK_ENABLED_FLAG
                else -> throw IllegalArgumentException("Unknown enum value: " + value)
            }
        }
    }

    override fun encode(stream: XdrOutputStream) {
        stream.writeInt(value)
    }
}
