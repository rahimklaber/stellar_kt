// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * InnerTransactionResult's original definition in the XDR file is:
 * ```
 * struct InnerTransactionResult
{
// Always 0. Here for binary compatibility.
int64 feeCharged;

union switch (TransactionResultCode code)
{
// txFEE_BUMP_INNER_SUCCESS is not included
case txSUCCESS:
case txFAILED:
OperationResult results<>;
case txTOO_EARLY:
case txTOO_LATE:
case txMISSING_OPERATION:
case txBAD_SEQ:
case txBAD_AUTH:
case txINSUFFICIENT_BALANCE:
case txNO_ACCOUNT:
case txINSUFFICIENT_FEE:
case txBAD_AUTH_EXTRA:
case txINTERNAL_ERROR:
case txNOT_SUPPORTED:
// txFEE_BUMP_INNER_FAILED is not included
case txBAD_SPONSORSHIP:
case txBAD_MIN_SEQ_AGE_OR_GAP:
case txMALFORMED:
case txSOROBAN_INVALID:
void;
}
result;

// reserved for future use
union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class InnerTransactionResult(
    val feeCharged: Int64,
    val result: InnerTransactionResultResult,
    val ext: InnerTransactionResultExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        feeCharged.encode(stream)
        result.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<InnerTransactionResult> {
        override fun decode(stream: XdrInputStream): InnerTransactionResult {
            val feeCharged = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val result = InnerTransactionResultResult.decode(stream)
            val ext = InnerTransactionResultExt.decode(stream)
            return InnerTransactionResult(
                feeCharged,
                result,
                ext,
            )
        }
    }

    /**
     * InnerTransactionResultResult's original definition in the XDR file is:
     * ```
     * union switch (TransactionResultCode code)
    {
    // txFEE_BUMP_INNER_SUCCESS is not included
    case txSUCCESS:
    case txFAILED:
    OperationResult results<>;
    case txTOO_EARLY:
    case txTOO_LATE:
    case txMISSING_OPERATION:
    case txBAD_SEQ:
    case txBAD_AUTH:
    case txINSUFFICIENT_BALANCE:
    case txNO_ACCOUNT:
    case txINSUFFICIENT_FEE:
    case txBAD_AUTH_EXTRA:
    case txINTERNAL_ERROR:
    case txNOT_SUPPORTED:
    // txFEE_BUMP_INNER_FAILED is not included
    case txBAD_SPONSORSHIP:
    case txBAD_MIN_SEQ_AGE_OR_GAP:
    case txMALFORMED:
    case txSOROBAN_INVALID:
    void;
    }
     * ```
     */
    sealed class InnerTransactionResultResult(val type: TransactionResultCode) : XdrElement {
        data class Txsuccess(
            val results: List<OperationResult>,
        ) : InnerTransactionResultResult(TransactionResultCode.txSUCCESS) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                val resultsSize = results.size
                stream.writeInt(resultsSize)
                results.encodeXdrElements(stream)
            }
        }

        data class Txfailed(
            val results: List<OperationResult>,
        ) : InnerTransactionResultResult(TransactionResultCode.txFAILED) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                val resultsSize = results.size
                stream.writeInt(resultsSize)
                results.encodeXdrElements(stream)
            }
        }

        data object TxtooEarly : InnerTransactionResultResult(TransactionResultCode.txTOO_EARLY) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxtooLate : InnerTransactionResultResult(TransactionResultCode.txTOO_LATE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxmissingOperation : InnerTransactionResultResult(TransactionResultCode.txMISSING_OPERATION) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxbadSeq : InnerTransactionResultResult(TransactionResultCode.txBAD_SEQ) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxbadAuth : InnerTransactionResultResult(TransactionResultCode.txBAD_AUTH) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxinsufficientBalance : InnerTransactionResultResult(TransactionResultCode.txINSUFFICIENT_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxnoAccount : InnerTransactionResultResult(TransactionResultCode.txNO_ACCOUNT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxinsufficientFee : InnerTransactionResultResult(TransactionResultCode.txINSUFFICIENT_FEE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxbadAuthExtra : InnerTransactionResultResult(TransactionResultCode.txBAD_AUTH_EXTRA) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxinternalError : InnerTransactionResultResult(TransactionResultCode.txINTERNAL_ERROR) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxnotSupported : InnerTransactionResultResult(TransactionResultCode.txNOT_SUPPORTED) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxbadSponsorship : InnerTransactionResultResult(TransactionResultCode.txBAD_SPONSORSHIP) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxbadMinSeqAgeOrGap : InnerTransactionResultResult(TransactionResultCode.txBAD_MIN_SEQ_AGE_OR_GAP) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object Txmalformed : InnerTransactionResultResult(TransactionResultCode.txMALFORMED) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        data object TxsorobanInvalid : InnerTransactionResultResult(TransactionResultCode.txSOROBAN_INVALID) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<InnerTransactionResultResult> {
            override fun decode(stream: XdrInputStream): InnerTransactionResultResult {
                return when (val type = TransactionResultCode.decode(stream)) {
                    TransactionResultCode.txSUCCESS -> {
                        val resultsSize = stream.readInt()
                        val results: List<OperationResult> = decodeXdrElementsList(resultsSize, stream, OperationResult.decoder())
                        Txsuccess(results)
                    }

                    TransactionResultCode.txFAILED -> {
                        val resultsSize = stream.readInt()
                        val results: List<OperationResult> = decodeXdrElementsList(resultsSize, stream, OperationResult.decoder())
                        Txfailed(results)
                    }

                    TransactionResultCode.txTOO_EARLY -> TxtooEarly
                    TransactionResultCode.txTOO_LATE -> TxtooLate
                    TransactionResultCode.txMISSING_OPERATION -> TxmissingOperation
                    TransactionResultCode.txBAD_SEQ -> TxbadSeq
                    TransactionResultCode.txBAD_AUTH -> TxbadAuth
                    TransactionResultCode.txINSUFFICIENT_BALANCE -> TxinsufficientBalance
                    TransactionResultCode.txNO_ACCOUNT -> TxnoAccount
                    TransactionResultCode.txINSUFFICIENT_FEE -> TxinsufficientFee
                    TransactionResultCode.txBAD_AUTH_EXTRA -> TxbadAuthExtra
                    TransactionResultCode.txINTERNAL_ERROR -> TxinternalError
                    TransactionResultCode.txNOT_SUPPORTED -> TxnotSupported
                    TransactionResultCode.txBAD_SPONSORSHIP -> TxbadSponsorship
                    TransactionResultCode.txBAD_MIN_SEQ_AGE_OR_GAP -> TxbadMinSeqAgeOrGap
                    TransactionResultCode.txMALFORMED -> Txmalformed
                    TransactionResultCode.txSOROBAN_INVALID -> TxsorobanInvalid
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }

    /**
     * InnerTransactionResultExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class InnerTransactionResultExt(val type: Int) : XdrElement {
        data object InnerTransactionResultExtV0 : InnerTransactionResultExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<InnerTransactionResultExt> {
            override fun decode(stream: XdrInputStream): InnerTransactionResultExt {
                return when (val type = Int.decode(stream)) {
                    0 -> InnerTransactionResultExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
