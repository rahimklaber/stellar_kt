// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ContractCostParamEntry's original definition in the XDR file is:
 * ```
 * struct ContractCostParamEntry {
// use `ext` to add more terms (e.g. higher order polynomials) in the future
ExtensionPoint ext;

int64 constTerm;
int64 linearTerm;
};
 * ```
 */
data class ContractCostParamEntry(
    val ext: ExtensionPoint,
    val constTerm: Int64,
    val linearTerm: Int64,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        constTerm.encode(stream)
        linearTerm.encode(stream)
    }

    companion object : XdrElementDecoder<ContractCostParamEntry> {
        override fun decode(stream: XdrInputStream): ContractCostParamEntry {
            val ext = ExtensionPoint.decode(stream)
            val constTerm = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val linearTerm = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            return ContractCostParamEntry(
                ext,
                constTerm,
                linearTerm,
            )
        }
    }
}
