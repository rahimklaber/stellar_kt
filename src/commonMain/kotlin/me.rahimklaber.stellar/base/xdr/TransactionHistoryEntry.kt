// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * TransactionHistoryEntry's original definition in the XDR file is:
 * ```
 * struct TransactionHistoryEntry
{
uint32 ledgerSeq;
TransactionSet txSet;

// when v != 0, txSet must be empty
union switch (int v)
{
case 0:
void;
case 1:
GeneralizedTransactionSet generalizedTxSet;
}
ext;
};
 * ```
 */
data class TransactionHistoryEntry(
    val ledgerSeq: Uint32,
    val txSet: TransactionSet,
    val ext: TransactionHistoryEntryExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ledgerSeq.encode(stream)
        txSet.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<TransactionHistoryEntry> {
        override fun decode(stream: XdrInputStream): TransactionHistoryEntry {
            val ledgerSeq = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val txSet = TransactionSet.decode(stream)
            val ext = TransactionHistoryEntryExt.decode(stream)
            return TransactionHistoryEntry(
                ledgerSeq,
                txSet,
                ext,
            )
        }
    }

    /**
     * TransactionHistoryEntryExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    case 1:
    GeneralizedTransactionSet generalizedTxSet;
    }
     * ```
     */
    sealed class TransactionHistoryEntryExt(val type: Int) : XdrElement {
        data object TransactionHistoryEntryExtV0 : TransactionHistoryEntryExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun generalizedTxSetOrNull(): TransactionHistoryEntryExtV1? = if (this is TransactionHistoryEntryExtV1) this else null
        data class TransactionHistoryEntryExtV1(
            val generalizedTxSet: GeneralizedTransactionSet,
        ) : TransactionHistoryEntryExt(1) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                generalizedTxSet.encode(stream)
            }
        }

        companion object : XdrElementDecoder<TransactionHistoryEntryExt> {
            override fun decode(stream: XdrInputStream): TransactionHistoryEntryExt {
                return when (val type = Int.decode(stream)) {
                    0 -> TransactionHistoryEntryExtV0
                    1 -> {
                        val generalizedTxSet = GeneralizedTransactionSet.decode(stream)
                        TransactionHistoryEntryExtV1(generalizedTxSet)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
