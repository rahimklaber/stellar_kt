// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * CreateClaimableBalanceResult's original definition in the XDR file is:
 * ```
 * union CreateClaimableBalanceResult switch (
CreateClaimableBalanceResultCode code)
{
case CREATE_CLAIMABLE_BALANCE_SUCCESS:
ClaimableBalanceID balanceID;
case CREATE_CLAIMABLE_BALANCE_MALFORMED:
case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
void;
};
 * ```
 */
sealed class CreateClaimableBalanceResult(val type: CreateClaimableBalanceResultCode) : XdrElement {
    fun balanceIDOrNull(): CreateClaimableBalanceSuccess? = if (this is CreateClaimableBalanceSuccess) this else null
    data class CreateClaimableBalanceSuccess(
        val balanceID: ClaimableBalanceID,
    ) : CreateClaimableBalanceResult(CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            balanceID.encode(stream)
        }
    }

    data object CreateClaimableBalanceMalformed : CreateClaimableBalanceResult(CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object CreateClaimableBalanceLowReserve :
        CreateClaimableBalanceResult(CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_LOW_RESERVE) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object CreateClaimableBalanceNoTrust : CreateClaimableBalanceResult(CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object CreateClaimableBalanceNotAuthorized :
        CreateClaimableBalanceResult(CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object CreateClaimableBalanceUnderfunded :
        CreateClaimableBalanceResult(CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_UNDERFUNDED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<CreateClaimableBalanceResult> {
        override fun decode(stream: XdrInputStream): CreateClaimableBalanceResult {
            return when (val type = CreateClaimableBalanceResultCode.decode(stream)) {
                CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_SUCCESS -> {
                    val balanceID = ClaimableBalanceID.decode(stream)
                    CreateClaimableBalanceSuccess(balanceID)
                }

                CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_MALFORMED -> CreateClaimableBalanceMalformed
                CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_LOW_RESERVE -> CreateClaimableBalanceLowReserve
                CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_NO_TRUST -> CreateClaimableBalanceNoTrust
                CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED -> CreateClaimableBalanceNotAuthorized
                CreateClaimableBalanceResultCode.CREATE_CLAIMABLE_BALANCE_UNDERFUNDED -> CreateClaimableBalanceUnderfunded
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
