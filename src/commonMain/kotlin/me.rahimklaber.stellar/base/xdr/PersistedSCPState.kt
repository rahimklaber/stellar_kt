// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * PersistedSCPState's original definition in the XDR file is:
 * ```
 * union PersistedSCPState switch (int v)
{
case 0:
PersistedSCPStateV0 v0;
case 1:
PersistedSCPStateV1 v1;
};
 * ```
 */
sealed class PersistedSCPState(val type: Int) : XdrElement {
    fun v0OrNull(): PersistedSCPStateV0? = if (this is PersistedSCPStateV0) this else null
    data class PersistedSCPStateV0(
        val v0: me.rahimklaber.stellar.base.xdr.PersistedSCPStateV0,
    ) : PersistedSCPState(0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v0.encode(stream)
        }
    }

    fun v1OrNull(): PersistedSCPStateV1? = if (this is PersistedSCPStateV1) this else null
    data class PersistedSCPStateV1(
        val v1: me.rahimklaber.stellar.base.xdr.PersistedSCPStateV1,
    ) : PersistedSCPState(1) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v1.encode(stream)
        }
    }

    companion object : XdrElementDecoder<PersistedSCPState> {
        override fun decode(stream: XdrInputStream): PersistedSCPState {
            return when (val type = Int.decode(stream)) {
                0 -> {
                    val v0 = me.rahimklaber.stellar.base.xdr.PersistedSCPStateV0.decode(stream)
                    PersistedSCPStateV0(v0)
                }

                1 -> {
                    val v1 = me.rahimklaber.stellar.base.xdr.PersistedSCPStateV1.decode(stream)
                    PersistedSCPStateV1(v1)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
