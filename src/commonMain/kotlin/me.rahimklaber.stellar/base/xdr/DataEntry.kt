// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * DataEntry's original definition in the XDR file is:
 * ```
 * struct DataEntry
{
AccountID accountID; // account this data belongs to
string64 dataName;
DataValue dataValue;

// reserved for future use
union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class DataEntry(
    val accountID: AccountID,
    val dataName: String64,
    val dataValue: DataValue,
    val ext: DataEntryExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        accountID.encode(stream)
        dataName.encode(stream)
        dataValue.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<DataEntry> {
        override fun decode(stream: XdrInputStream): DataEntry {
            val accountID = AccountID.decode(stream)
            val dataName = String64.decode(stream)
            val dataValue = DataValue.decode(stream)
            val ext = DataEntryExt.decode(stream)
            return DataEntry(
                accountID,
                dataName,
                dataValue,
                ext,
            )
        }
    }

    /**
     * DataEntryExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class DataEntryExt(val type: Int) : XdrElement {
        data object DataEntryExtV0 : DataEntryExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<DataEntryExt> {
            override fun decode(stream: XdrInputStream): DataEntryExt {
                return when (val type = Int.decode(stream)) {
                    0 -> DataEntryExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
