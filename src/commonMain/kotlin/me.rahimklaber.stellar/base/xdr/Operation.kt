// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * Operation's original definition in the XDR file is:
 * ```
 * struct Operation
{
// sourceAccount is the account used to run the operation
// if not set, the runtime defaults to "sourceAccount" specified at
// the transaction level
MuxedAccount* sourceAccount;

union switch (OperationType type)
{
case CREATE_ACCOUNT:
CreateAccountOp createAccountOp;
case PAYMENT:
PaymentOp paymentOp;
case PATH_PAYMENT_STRICT_RECEIVE:
PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;
case MANAGE_SELL_OFFER:
ManageSellOfferOp manageSellOfferOp;
case CREATE_PASSIVE_SELL_OFFER:
CreatePassiveSellOfferOp createPassiveSellOfferOp;
case SET_OPTIONS:
SetOptionsOp setOptionsOp;
case CHANGE_TRUST:
ChangeTrustOp changeTrustOp;
case ALLOW_TRUST:
AllowTrustOp allowTrustOp;
case ACCOUNT_MERGE:
MuxedAccount destination;
case INFLATION:
void;
case MANAGE_DATA:
ManageDataOp manageDataOp;
case BUMP_SEQUENCE:
BumpSequenceOp bumpSequenceOp;
case MANAGE_BUY_OFFER:
ManageBuyOfferOp manageBuyOfferOp;
case PATH_PAYMENT_STRICT_SEND:
PathPaymentStrictSendOp pathPaymentStrictSendOp;
case CREATE_CLAIMABLE_BALANCE:
CreateClaimableBalanceOp createClaimableBalanceOp;
case CLAIM_CLAIMABLE_BALANCE:
ClaimClaimableBalanceOp claimClaimableBalanceOp;
case BEGIN_SPONSORING_FUTURE_RESERVES:
BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;
case END_SPONSORING_FUTURE_RESERVES:
void;
case REVOKE_SPONSORSHIP:
RevokeSponsorshipOp revokeSponsorshipOp;
case CLAWBACK:
ClawbackOp clawbackOp;
case CLAWBACK_CLAIMABLE_BALANCE:
ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;
case SET_TRUST_LINE_FLAGS:
SetTrustLineFlagsOp setTrustLineFlagsOp;
case LIQUIDITY_POOL_DEPOSIT:
LiquidityPoolDepositOp liquidityPoolDepositOp;
case LIQUIDITY_POOL_WITHDRAW:
LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;
case INVOKE_HOST_FUNCTION:
InvokeHostFunctionOp invokeHostFunctionOp;
case EXTEND_FOOTPRINT_TTL:
ExtendFootprintTTLOp extendFootprintTTLOp;
case RESTORE_FOOTPRINT:
RestoreFootprintOp restoreFootprintOp;
}
body;
};
 * ```
 */
data class Operation(
    val sourceAccount: MuxedAccount?,
    val body: OperationBody,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        if (sourceAccount != null) {
            stream.writeInt(1)
            sourceAccount.encode(stream)
        } else {
            stream.writeInt(0)
        }
        body.encode(stream)
    }

    companion object : XdrElementDecoder<Operation> {
        override fun decode(stream: XdrInputStream): Operation {
            val sourceAccountPresent = stream.readInt()
            val sourceAccount = if (sourceAccountPresent != 0) {
                MuxedAccount.decode(stream)
            } else {
                null
            }
            val body = OperationBody.decode(stream)
            return Operation(
                sourceAccount,
                body,
            )
        }
    }

    /**
     * OperationBody's original definition in the XDR file is:
     * ```
     * union switch (OperationType type)
    {
    case CREATE_ACCOUNT:
    CreateAccountOp createAccountOp;
    case PAYMENT:
    PaymentOp paymentOp;
    case PATH_PAYMENT_STRICT_RECEIVE:
    PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;
    case MANAGE_SELL_OFFER:
    ManageSellOfferOp manageSellOfferOp;
    case CREATE_PASSIVE_SELL_OFFER:
    CreatePassiveSellOfferOp createPassiveSellOfferOp;
    case SET_OPTIONS:
    SetOptionsOp setOptionsOp;
    case CHANGE_TRUST:
    ChangeTrustOp changeTrustOp;
    case ALLOW_TRUST:
    AllowTrustOp allowTrustOp;
    case ACCOUNT_MERGE:
    MuxedAccount destination;
    case INFLATION:
    void;
    case MANAGE_DATA:
    ManageDataOp manageDataOp;
    case BUMP_SEQUENCE:
    BumpSequenceOp bumpSequenceOp;
    case MANAGE_BUY_OFFER:
    ManageBuyOfferOp manageBuyOfferOp;
    case PATH_PAYMENT_STRICT_SEND:
    PathPaymentStrictSendOp pathPaymentStrictSendOp;
    case CREATE_CLAIMABLE_BALANCE:
    CreateClaimableBalanceOp createClaimableBalanceOp;
    case CLAIM_CLAIMABLE_BALANCE:
    ClaimClaimableBalanceOp claimClaimableBalanceOp;
    case BEGIN_SPONSORING_FUTURE_RESERVES:
    BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;
    case END_SPONSORING_FUTURE_RESERVES:
    void;
    case REVOKE_SPONSORSHIP:
    RevokeSponsorshipOp revokeSponsorshipOp;
    case CLAWBACK:
    ClawbackOp clawbackOp;
    case CLAWBACK_CLAIMABLE_BALANCE:
    ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;
    case SET_TRUST_LINE_FLAGS:
    SetTrustLineFlagsOp setTrustLineFlagsOp;
    case LIQUIDITY_POOL_DEPOSIT:
    LiquidityPoolDepositOp liquidityPoolDepositOp;
    case LIQUIDITY_POOL_WITHDRAW:
    LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;
    case INVOKE_HOST_FUNCTION:
    InvokeHostFunctionOp invokeHostFunctionOp;
    case EXTEND_FOOTPRINT_TTL:
    ExtendFootprintTTLOp extendFootprintTTLOp;
    case RESTORE_FOOTPRINT:
    RestoreFootprintOp restoreFootprintOp;
    }
     * ```
     */
    sealed class OperationBody(val type: OperationType) : XdrElement {
        fun createAccountOpOrNull(): CreateAccount? = if (this is CreateAccount) this else null
        data class CreateAccount(
            val createAccountOp: CreateAccountOp,
        ) : OperationBody(OperationType.CREATE_ACCOUNT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                createAccountOp.encode(stream)
            }
        }

        fun paymentOpOrNull(): Payment? = if (this is Payment) this else null
        data class Payment(
            val paymentOp: PaymentOp,
        ) : OperationBody(OperationType.PAYMENT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                paymentOp.encode(stream)
            }
        }

        fun pathPaymentStrictReceiveOpOrNull(): PathPaymentStrictReceive? = if (this is PathPaymentStrictReceive) this else null
        data class PathPaymentStrictReceive(
            val pathPaymentStrictReceiveOp: PathPaymentStrictReceiveOp,
        ) : OperationBody(OperationType.PATH_PAYMENT_STRICT_RECEIVE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                pathPaymentStrictReceiveOp.encode(stream)
            }
        }

        fun manageSellOfferOpOrNull(): ManageSellOffer? = if (this is ManageSellOffer) this else null
        data class ManageSellOffer(
            val manageSellOfferOp: ManageSellOfferOp,
        ) : OperationBody(OperationType.MANAGE_SELL_OFFER) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                manageSellOfferOp.encode(stream)
            }
        }

        fun createPassiveSellOfferOpOrNull(): CreatePassiveSellOffer? = if (this is CreatePassiveSellOffer) this else null
        data class CreatePassiveSellOffer(
            val createPassiveSellOfferOp: CreatePassiveSellOfferOp,
        ) : OperationBody(OperationType.CREATE_PASSIVE_SELL_OFFER) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                createPassiveSellOfferOp.encode(stream)
            }
        }

        fun setOptionsOpOrNull(): SetOptions? = if (this is SetOptions) this else null
        data class SetOptions(
            val setOptionsOp: SetOptionsOp,
        ) : OperationBody(OperationType.SET_OPTIONS) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                setOptionsOp.encode(stream)
            }
        }

        fun changeTrustOpOrNull(): ChangeTrust? = if (this is ChangeTrust) this else null
        data class ChangeTrust(
            val changeTrustOp: ChangeTrustOp,
        ) : OperationBody(OperationType.CHANGE_TRUST) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                changeTrustOp.encode(stream)
            }
        }

        fun allowTrustOpOrNull(): AllowTrust? = if (this is AllowTrust) this else null
        data class AllowTrust(
            val allowTrustOp: AllowTrustOp,
        ) : OperationBody(OperationType.ALLOW_TRUST) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                allowTrustOp.encode(stream)
            }
        }

        fun destinationOrNull(): AccountMerge? = if (this is AccountMerge) this else null
        data class AccountMerge(
            val destination: MuxedAccount,
        ) : OperationBody(OperationType.ACCOUNT_MERGE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                destination.encode(stream)
            }
        }

        data object Inflation : OperationBody(OperationType.INFLATION) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun manageDataOpOrNull(): ManageData? = if (this is ManageData) this else null
        data class ManageData(
            val manageDataOp: ManageDataOp,
        ) : OperationBody(OperationType.MANAGE_DATA) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                manageDataOp.encode(stream)
            }
        }

        fun bumpSequenceOpOrNull(): BumpSequence? = if (this is BumpSequence) this else null
        data class BumpSequence(
            val bumpSequenceOp: BumpSequenceOp,
        ) : OperationBody(OperationType.BUMP_SEQUENCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                bumpSequenceOp.encode(stream)
            }
        }

        fun manageBuyOfferOpOrNull(): ManageBuyOffer? = if (this is ManageBuyOffer) this else null
        data class ManageBuyOffer(
            val manageBuyOfferOp: ManageBuyOfferOp,
        ) : OperationBody(OperationType.MANAGE_BUY_OFFER) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                manageBuyOfferOp.encode(stream)
            }
        }

        fun pathPaymentStrictSendOpOrNull(): PathPaymentStrictSend? = if (this is PathPaymentStrictSend) this else null
        data class PathPaymentStrictSend(
            val pathPaymentStrictSendOp: PathPaymentStrictSendOp,
        ) : OperationBody(OperationType.PATH_PAYMENT_STRICT_SEND) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                pathPaymentStrictSendOp.encode(stream)
            }
        }

        fun createClaimableBalanceOpOrNull(): CreateClaimableBalance? = if (this is CreateClaimableBalance) this else null
        data class CreateClaimableBalance(
            val createClaimableBalanceOp: CreateClaimableBalanceOp,
        ) : OperationBody(OperationType.CREATE_CLAIMABLE_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                createClaimableBalanceOp.encode(stream)
            }
        }

        fun claimClaimableBalanceOpOrNull(): ClaimClaimableBalance? = if (this is ClaimClaimableBalance) this else null
        data class ClaimClaimableBalance(
            val claimClaimableBalanceOp: ClaimClaimableBalanceOp,
        ) : OperationBody(OperationType.CLAIM_CLAIMABLE_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                claimClaimableBalanceOp.encode(stream)
            }
        }

        fun beginSponsoringFutureReservesOpOrNull(): BeginSponsoringFutureReserves? = if (this is BeginSponsoringFutureReserves) this else null
        data class BeginSponsoringFutureReserves(
            val beginSponsoringFutureReservesOp: BeginSponsoringFutureReservesOp,
        ) : OperationBody(OperationType.BEGIN_SPONSORING_FUTURE_RESERVES) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                beginSponsoringFutureReservesOp.encode(stream)
            }
        }

        data object EndSponsoringFutureReserves : OperationBody(OperationType.END_SPONSORING_FUTURE_RESERVES) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun revokeSponsorshipOpOrNull(): RevokeSponsorship? = if (this is RevokeSponsorship) this else null
        data class RevokeSponsorship(
            val revokeSponsorshipOp: RevokeSponsorshipOp,
        ) : OperationBody(OperationType.REVOKE_SPONSORSHIP) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                revokeSponsorshipOp.encode(stream)
            }
        }

        fun clawbackOpOrNull(): Clawback? = if (this is Clawback) this else null
        data class Clawback(
            val clawbackOp: ClawbackOp,
        ) : OperationBody(OperationType.CLAWBACK) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                clawbackOp.encode(stream)
            }
        }

        fun clawbackClaimableBalanceOpOrNull(): ClawbackClaimableBalance? = if (this is ClawbackClaimableBalance) this else null
        data class ClawbackClaimableBalance(
            val clawbackClaimableBalanceOp: ClawbackClaimableBalanceOp,
        ) : OperationBody(OperationType.CLAWBACK_CLAIMABLE_BALANCE) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                clawbackClaimableBalanceOp.encode(stream)
            }
        }

        fun setTrustLineFlagsOpOrNull(): SetTrustLineFlags? = if (this is SetTrustLineFlags) this else null
        data class SetTrustLineFlags(
            val setTrustLineFlagsOp: SetTrustLineFlagsOp,
        ) : OperationBody(OperationType.SET_TRUST_LINE_FLAGS) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                setTrustLineFlagsOp.encode(stream)
            }
        }

        fun liquidityPoolDepositOpOrNull(): LiquidityPoolDeposit? = if (this is LiquidityPoolDeposit) this else null
        data class LiquidityPoolDeposit(
            val liquidityPoolDepositOp: LiquidityPoolDepositOp,
        ) : OperationBody(OperationType.LIQUIDITY_POOL_DEPOSIT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                liquidityPoolDepositOp.encode(stream)
            }
        }

        fun liquidityPoolWithdrawOpOrNull(): LiquidityPoolWithdraw? = if (this is LiquidityPoolWithdraw) this else null
        data class LiquidityPoolWithdraw(
            val liquidityPoolWithdrawOp: LiquidityPoolWithdrawOp,
        ) : OperationBody(OperationType.LIQUIDITY_POOL_WITHDRAW) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                liquidityPoolWithdrawOp.encode(stream)
            }
        }

        fun invokeHostFunctionOpOrNull(): InvokeHostFunction? = if (this is InvokeHostFunction) this else null
        data class InvokeHostFunction(
            val invokeHostFunctionOp: InvokeHostFunctionOp,
        ) : OperationBody(OperationType.INVOKE_HOST_FUNCTION) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                invokeHostFunctionOp.encode(stream)
            }
        }

        fun extendFootprintTTLOpOrNull(): ExtendFootprintTtl? = if (this is ExtendFootprintTtl) this else null
        data class ExtendFootprintTtl(
            val extendFootprintTTLOp: ExtendFootprintTTLOp,
        ) : OperationBody(OperationType.EXTEND_FOOTPRINT_TTL) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                extendFootprintTTLOp.encode(stream)
            }
        }

        fun restoreFootprintOpOrNull(): RestoreFootprint? = if (this is RestoreFootprint) this else null
        data class RestoreFootprint(
            val restoreFootprintOp: RestoreFootprintOp,
        ) : OperationBody(OperationType.RESTORE_FOOTPRINT) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                restoreFootprintOp.encode(stream)
            }
        }

        companion object : XdrElementDecoder<OperationBody> {
            override fun decode(stream: XdrInputStream): OperationBody {
                return when (val type = OperationType.decode(stream)) {
                    OperationType.CREATE_ACCOUNT -> {
                        val createAccountOp = CreateAccountOp.decode(stream)
                        CreateAccount(createAccountOp)
                    }

                    OperationType.PAYMENT -> {
                        val paymentOp = PaymentOp.decode(stream)
                        Payment(paymentOp)
                    }

                    OperationType.PATH_PAYMENT_STRICT_RECEIVE -> {
                        val pathPaymentStrictReceiveOp = PathPaymentStrictReceiveOp.decode(stream)
                        PathPaymentStrictReceive(pathPaymentStrictReceiveOp)
                    }

                    OperationType.MANAGE_SELL_OFFER -> {
                        val manageSellOfferOp = ManageSellOfferOp.decode(stream)
                        ManageSellOffer(manageSellOfferOp)
                    }

                    OperationType.CREATE_PASSIVE_SELL_OFFER -> {
                        val createPassiveSellOfferOp = CreatePassiveSellOfferOp.decode(stream)
                        CreatePassiveSellOffer(createPassiveSellOfferOp)
                    }

                    OperationType.SET_OPTIONS -> {
                        val setOptionsOp = SetOptionsOp.decode(stream)
                        SetOptions(setOptionsOp)
                    }

                    OperationType.CHANGE_TRUST -> {
                        val changeTrustOp = ChangeTrustOp.decode(stream)
                        ChangeTrust(changeTrustOp)
                    }

                    OperationType.ALLOW_TRUST -> {
                        val allowTrustOp = AllowTrustOp.decode(stream)
                        AllowTrust(allowTrustOp)
                    }

                    OperationType.ACCOUNT_MERGE -> {
                        val destination = MuxedAccount.decode(stream)
                        AccountMerge(destination)
                    }

                    OperationType.INFLATION -> Inflation
                    OperationType.MANAGE_DATA -> {
                        val manageDataOp = ManageDataOp.decode(stream)
                        ManageData(manageDataOp)
                    }

                    OperationType.BUMP_SEQUENCE -> {
                        val bumpSequenceOp = BumpSequenceOp.decode(stream)
                        BumpSequence(bumpSequenceOp)
                    }

                    OperationType.MANAGE_BUY_OFFER -> {
                        val manageBuyOfferOp = ManageBuyOfferOp.decode(stream)
                        ManageBuyOffer(manageBuyOfferOp)
                    }

                    OperationType.PATH_PAYMENT_STRICT_SEND -> {
                        val pathPaymentStrictSendOp = PathPaymentStrictSendOp.decode(stream)
                        PathPaymentStrictSend(pathPaymentStrictSendOp)
                    }

                    OperationType.CREATE_CLAIMABLE_BALANCE -> {
                        val createClaimableBalanceOp = CreateClaimableBalanceOp.decode(stream)
                        CreateClaimableBalance(createClaimableBalanceOp)
                    }

                    OperationType.CLAIM_CLAIMABLE_BALANCE -> {
                        val claimClaimableBalanceOp = ClaimClaimableBalanceOp.decode(stream)
                        ClaimClaimableBalance(claimClaimableBalanceOp)
                    }

                    OperationType.BEGIN_SPONSORING_FUTURE_RESERVES -> {
                        val beginSponsoringFutureReservesOp = BeginSponsoringFutureReservesOp.decode(stream)
                        BeginSponsoringFutureReserves(beginSponsoringFutureReservesOp)
                    }

                    OperationType.END_SPONSORING_FUTURE_RESERVES -> EndSponsoringFutureReserves
                    OperationType.REVOKE_SPONSORSHIP -> {
                        val revokeSponsorshipOp = RevokeSponsorshipOp.decode(stream)
                        RevokeSponsorship(revokeSponsorshipOp)
                    }

                    OperationType.CLAWBACK -> {
                        val clawbackOp = ClawbackOp.decode(stream)
                        Clawback(clawbackOp)
                    }

                    OperationType.CLAWBACK_CLAIMABLE_BALANCE -> {
                        val clawbackClaimableBalanceOp = ClawbackClaimableBalanceOp.decode(stream)
                        ClawbackClaimableBalance(clawbackClaimableBalanceOp)
                    }

                    OperationType.SET_TRUST_LINE_FLAGS -> {
                        val setTrustLineFlagsOp = SetTrustLineFlagsOp.decode(stream)
                        SetTrustLineFlags(setTrustLineFlagsOp)
                    }

                    OperationType.LIQUIDITY_POOL_DEPOSIT -> {
                        val liquidityPoolDepositOp = LiquidityPoolDepositOp.decode(stream)
                        LiquidityPoolDeposit(liquidityPoolDepositOp)
                    }

                    OperationType.LIQUIDITY_POOL_WITHDRAW -> {
                        val liquidityPoolWithdrawOp = LiquidityPoolWithdrawOp.decode(stream)
                        LiquidityPoolWithdraw(liquidityPoolWithdrawOp)
                    }

                    OperationType.INVOKE_HOST_FUNCTION -> {
                        val invokeHostFunctionOp = InvokeHostFunctionOp.decode(stream)
                        InvokeHostFunction(invokeHostFunctionOp)
                    }

                    OperationType.EXTEND_FOOTPRINT_TTL -> {
                        val extendFootprintTTLOp = ExtendFootprintTTLOp.decode(stream)
                        ExtendFootprintTtl(extendFootprintTTLOp)
                    }

                    OperationType.RESTORE_FOOTPRINT -> {
                        val restoreFootprintOp = RestoreFootprintOp.decode(stream)
                        RestoreFootprint(restoreFootprintOp)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
