// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCErrorType's original definition in the XDR file is:
 * ```
 * enum SCErrorType
{
SCE_CONTRACT = 0,          // Contract-specific, user-defined codes.
SCE_WASM_VM = 1,           // Errors while interpreting WASM bytecode.
SCE_CONTEXT = 2,           // Errors in the contract's host context.
SCE_STORAGE = 3,           // Errors accessing host storage.
SCE_OBJECT = 4,            // Errors working with host objects.
SCE_CRYPTO = 5,            // Errors in cryptographic operations.
SCE_EVENTS = 6,            // Errors while emitting events.
SCE_BUDGET = 7,            // Errors relating to budget limits.
SCE_VALUE = 8,             // Errors working with host values or SCVals.
SCE_AUTH = 9               // Errors from the authentication subsystem.
};
 * ```
 */
enum class SCErrorType(val value: Int) : XdrElement {
    SCE_CONTRACT(0),
    SCE_WASM_VM(1),
    SCE_CONTEXT(2),
    SCE_STORAGE(3),
    SCE_OBJECT(4),
    SCE_CRYPTO(5),
    SCE_EVENTS(6),
    SCE_BUDGET(7),
    SCE_VALUE(8),
    SCE_AUTH(9);

    companion object : XdrElementDecoder<SCErrorType> {
        override fun decode(stream: XdrInputStream): SCErrorType {
            return when (val value = stream.readInt()) {
                0 -> SCE_CONTRACT
                1 -> SCE_WASM_VM
                2 -> SCE_CONTEXT
                3 -> SCE_STORAGE
                4 -> SCE_OBJECT
                5 -> SCE_CRYPTO
                6 -> SCE_EVENTS
                7 -> SCE_BUDGET
                8 -> SCE_VALUE
                9 -> SCE_AUTH
                else -> throw IllegalArgumentException("Unknown enum value: " + value)
            }
        }
    }

    override fun encode(stream: XdrOutputStream) {
        stream.writeInt(value)
    }
}
