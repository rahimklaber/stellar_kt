// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * PathPaymentStrictSendOp's original definition in the XDR file is:
 * ```
 * struct PathPaymentStrictSendOp
{
Asset sendAsset;  // asset we pay with
int64 sendAmount; // amount of sendAsset to send (excluding fees)

MuxedAccount destination; // recipient of the payment
Asset destAsset;          // what they end up with
int64 destMin;            // the minimum amount of dest asset to
// be received
// The operation will fail if it can't be met

Asset path<5>; // additional hops it must go through to get there
};
 * ```
 */
data class PathPaymentStrictSendOp(
    val sendAsset: Asset,
    val sendAmount: Int64,
    val destination: MuxedAccount,
    val destAsset: Asset,
    val destMin: Int64,
    val path: List<Asset>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        sendAsset.encode(stream)
        sendAmount.encode(stream)
        destination.encode(stream)
        destAsset.encode(stream)
        destMin.encode(stream)
        val pathSize = path.size
        stream.writeInt(pathSize)
        path.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<PathPaymentStrictSendOp> {
        override fun decode(stream: XdrInputStream): PathPaymentStrictSendOp {
            val sendAsset = Asset.decode(stream)
            val sendAmount = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val destination = MuxedAccount.decode(stream)
            val destAsset = Asset.decode(stream)
            val destMin = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val pathSize = stream.readInt()
            val path: List<Asset> = decodeXdrElementsList(pathSize, stream, Asset.decoder())
            return PathPaymentStrictSendOp(
                sendAsset,
                sendAmount,
                destination,
                destAsset,
                destMin,
                path,
            )
        }
    }
}
