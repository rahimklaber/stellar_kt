// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SorobanTransactionMetaExtV1's original definition in the XDR file is:
 * ```
 * struct SorobanTransactionMetaExtV1
{
ExtensionPoint ext;

// The following are the components of the overall Soroban resource fee
// charged for the transaction.
// The following relation holds:
// `resourceFeeCharged = totalNonRefundableResourceFeeCharged + totalRefundableResourceFeeCharged`
// where `resourceFeeCharged` is the overall fee charged for the
// transaction. Also, `resourceFeeCharged` <= `sorobanData.resourceFee`
// i.e.we never charge more than the declared resource fee.
// The inclusion fee for charged the Soroban transaction can be found using
// the following equation:
// `result.feeCharged = resourceFeeCharged + inclusionFeeCharged`.

// Total amount (in stroops) that has been charged for non-refundable
// Soroban resources.
// Non-refundable resources are charged based on the usage declared in
// the transaction envelope (such as `instructions`, `readBytes` etc.) and
// is charged regardless of the success of the transaction.
int64 totalNonRefundableResourceFeeCharged;
// Total amount (in stroops) that has been charged for refundable
// Soroban resource fees.
// Currently this comprises the rent fee (`rentFeeCharged`) and the
// fee for the events and return value.
// Refundable resources are charged based on the actual resources usage.
// Since currently refundable resources are only used for the successful
// transactions, this will be `0` for failed transactions.
int64 totalRefundableResourceFeeCharged;
// Amount (in stroops) that has been charged for rent.
// This is a part of `totalNonRefundableResourceFeeCharged`.
int64 rentFeeCharged;
};
 * ```
 */
data class SorobanTransactionMetaExtV1(
    val ext: ExtensionPoint,
    val totalNonRefundableResourceFeeCharged: Int64,
    val totalRefundableResourceFeeCharged: Int64,
    val rentFeeCharged: Int64,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        totalNonRefundableResourceFeeCharged.encode(stream)
        totalRefundableResourceFeeCharged.encode(stream)
        rentFeeCharged.encode(stream)
    }

    companion object : XdrElementDecoder<SorobanTransactionMetaExtV1> {
        override fun decode(stream: XdrInputStream): SorobanTransactionMetaExtV1 {
            val ext = ExtensionPoint.decode(stream)
            val totalNonRefundableResourceFeeCharged = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val totalRefundableResourceFeeCharged = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            val rentFeeCharged = me.rahimklaber.stellar.base.xdr.Int64.decode(stream)
            return SorobanTransactionMetaExtV1(
                ext,
                totalNonRefundableResourceFeeCharged,
                totalRefundableResourceFeeCharged,
                rentFeeCharged,
            )
        }
    }
}
