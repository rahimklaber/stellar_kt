// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * TransactionHistoryResultEntry's original definition in the XDR file is:
 * ```
 * struct TransactionHistoryResultEntry
{
uint32 ledgerSeq;
TransactionResultSet txResultSet;

// reserved for future use
union switch (int v)
{
case 0:
void;
}
ext;
};
 * ```
 */
data class TransactionHistoryResultEntry(
    val ledgerSeq: Uint32,
    val txResultSet: TransactionResultSet,
    val ext: TransactionHistoryResultEntryExt,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ledgerSeq.encode(stream)
        txResultSet.encode(stream)
        ext.encode(stream)
    }

    companion object : XdrElementDecoder<TransactionHistoryResultEntry> {
        override fun decode(stream: XdrInputStream): TransactionHistoryResultEntry {
            val ledgerSeq = me.rahimklaber.stellar.base.xdr.Uint32.decode(stream)
            val txResultSet = TransactionResultSet.decode(stream)
            val ext = TransactionHistoryResultEntryExt.decode(stream)
            return TransactionHistoryResultEntry(
                ledgerSeq,
                txResultSet,
                ext,
            )
        }
    }

    /**
     * TransactionHistoryResultEntryExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    }
     * ```
     */
    sealed class TransactionHistoryResultEntryExt(val type: Int) : XdrElement {
        data object TransactionHistoryResultEntryExtV0 : TransactionHistoryResultEntryExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        companion object : XdrElementDecoder<TransactionHistoryResultEntryExt> {
            override fun decode(stream: XdrInputStream): TransactionHistoryResultEntryExt {
                return when (val type = Int.decode(stream)) {
                    0 -> TransactionHistoryResultEntryExtV0
                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }
    }
}
