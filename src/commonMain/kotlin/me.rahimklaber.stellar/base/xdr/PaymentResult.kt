// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * PaymentResult's original definition in the XDR file is:
 * ```
 * union PaymentResult switch (PaymentResultCode code)
{
case PAYMENT_SUCCESS:
void;
case PAYMENT_MALFORMED:
case PAYMENT_UNDERFUNDED:
case PAYMENT_SRC_NO_TRUST:
case PAYMENT_SRC_NOT_AUTHORIZED:
case PAYMENT_NO_DESTINATION:
case PAYMENT_NO_TRUST:
case PAYMENT_NOT_AUTHORIZED:
case PAYMENT_LINE_FULL:
case PAYMENT_NO_ISSUER:
void;
};
 * ```
 */
sealed class PaymentResult(val type: PaymentResultCode) : XdrElement {
    data object PaymentSuccess : PaymentResult(PaymentResultCode.PAYMENT_SUCCESS) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentMalformed : PaymentResult(PaymentResultCode.PAYMENT_MALFORMED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentUnderfunded : PaymentResult(PaymentResultCode.PAYMENT_UNDERFUNDED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentSrcNoTrust : PaymentResult(PaymentResultCode.PAYMENT_SRC_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentSrcNotAuthorized : PaymentResult(PaymentResultCode.PAYMENT_SRC_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentNoDestination : PaymentResult(PaymentResultCode.PAYMENT_NO_DESTINATION) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentNoTrust : PaymentResult(PaymentResultCode.PAYMENT_NO_TRUST) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentNotAuthorized : PaymentResult(PaymentResultCode.PAYMENT_NOT_AUTHORIZED) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentLineFull : PaymentResult(PaymentResultCode.PAYMENT_LINE_FULL) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    data object PaymentNoIssuer : PaymentResult(PaymentResultCode.PAYMENT_NO_ISSUER) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
        }
    }

    companion object : XdrElementDecoder<PaymentResult> {
        override fun decode(stream: XdrInputStream): PaymentResult {
            return when (val type = PaymentResultCode.decode(stream)) {
                PaymentResultCode.PAYMENT_SUCCESS -> PaymentSuccess
                PaymentResultCode.PAYMENT_MALFORMED -> PaymentMalformed
                PaymentResultCode.PAYMENT_UNDERFUNDED -> PaymentUnderfunded
                PaymentResultCode.PAYMENT_SRC_NO_TRUST -> PaymentSrcNoTrust
                PaymentResultCode.PAYMENT_SRC_NOT_AUTHORIZED -> PaymentSrcNotAuthorized
                PaymentResultCode.PAYMENT_NO_DESTINATION -> PaymentNoDestination
                PaymentResultCode.PAYMENT_NO_TRUST -> PaymentNoTrust
                PaymentResultCode.PAYMENT_NOT_AUTHORIZED -> PaymentNotAuthorized
                PaymentResultCode.PAYMENT_LINE_FULL -> PaymentLineFull
                PaymentResultCode.PAYMENT_NO_ISSUER -> PaymentNoIssuer
                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }
}
