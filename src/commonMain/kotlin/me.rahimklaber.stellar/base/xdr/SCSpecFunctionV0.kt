// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * SCSpecFunctionV0's original definition in the XDR file is:
 * ```
 * struct SCSpecFunctionV0
{
string doc<SC_SPEC_DOC_LIMIT>;
SCSymbol name;
SCSpecFunctionInputV0 inputs<10>;
SCSpecTypeDef outputs<1>;
};
 * ```
 */
data class SCSpecFunctionV0(
    val doc: String,
    val name: SCSymbol,
    val inputs: List<SCSpecFunctionInputV0>,
    val outputs: List<SCSpecTypeDef>,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        val docSize = doc.length
        stream.writeInt(docSize)
        stream.writeBytes(doc.encodeToByteArray())
        name.encode(stream)
        val inputsSize = inputs.size
        stream.writeInt(inputsSize)
        inputs.encodeXdrElements(stream)
        val outputsSize = outputs.size
        stream.writeInt(outputsSize)
        outputs.encodeXdrElements(stream)
    }

    companion object : XdrElementDecoder<SCSpecFunctionV0> {
        override fun decode(stream: XdrInputStream): SCSpecFunctionV0 {
            val docSize = stream.readInt()
            val doc = decodeString(docSize, stream)
            val name = SCSymbol.decode(stream)
            val inputsSize = stream.readInt()
            val inputs: List<SCSpecFunctionInputV0> = decodeXdrElementsList(inputsSize, stream, SCSpecFunctionInputV0.decoder())
            val outputsSize = stream.readInt()
            val outputs: List<SCSpecTypeDef> = decodeXdrElementsList(outputsSize, stream, SCSpecTypeDef.decoder())
            return SCSpecFunctionV0(
                doc,
                name,
                inputs,
                outputs,
            )
        }
    }
}
