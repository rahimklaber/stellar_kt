// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * ContractCodeEntry's original definition in the XDR file is:
 * ```
 * struct ContractCodeEntry {
union switch (int v)
{
case 0:
void;
case 1:
struct
{
ExtensionPoint ext;
ContractCodeCostInputs costInputs;
} v1;
} ext;

Hash hash;
opaque code<>;
};
 * ```
 */
data class ContractCodeEntry(
    val ext: ContractCodeEntryExt,
    val hash: Hash,
    val code: ByteArray,
) : XdrElement {
    override fun encode(stream: XdrOutputStream) {
        ext.encode(stream)
        hash.encode(stream)
        val codeSize = code.size
        stream.writeInt(codeSize)
        stream.writeBytes(code)
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ContractCodeEntry

        if (ext != other.ext) return false
        if (hash != other.hash) return false
        if (!code.contentEquals(other.code)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = ext.hashCode()
        result = 31 * result + hash.hashCode()
        result = 31 * result + code.contentHashCode()
        return result
    }

    companion object : XdrElementDecoder<ContractCodeEntry> {
        override fun decode(stream: XdrInputStream): ContractCodeEntry {
            val ext = ContractCodeEntryExt.decode(stream)
            val hash = Hash.decode(stream)
            val codeSize = stream.readInt()
            val code = stream.readBytes(codeSize)
            return ContractCodeEntry(
                ext,
                hash,
                code,
            )
        }
    }

    /**
     * ContractCodeEntryExt's original definition in the XDR file is:
     * ```
     * union switch (int v)
    {
    case 0:
    void;
    case 1:
    struct
    {
    ExtensionPoint ext;
    ContractCodeCostInputs costInputs;
    } v1;
    }
     * ```
     */
    sealed class ContractCodeEntryExt(val type: Int) : XdrElement {
        data object ContractCodeEntryExtV0 : ContractCodeEntryExt(0) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
            }
        }

        fun v1OrNull(): ContractCodeEntryExtV1? = if (this is ContractCodeEntryExtV1) this else null
        data class ContractCodeEntryExtV1(
            val v1: ContractCodeEntryV1Anon,
        ) : ContractCodeEntryExt(1) {
            override fun encode(stream: XdrOutputStream) {
                type.encode(stream)
                v1.encode(stream)
            }
        }

        companion object : XdrElementDecoder<ContractCodeEntryExt> {
            override fun decode(stream: XdrInputStream): ContractCodeEntryExt {
                return when (val type = Int.decode(stream)) {
                    0 -> ContractCodeEntryExtV0
                    1 -> {
                        val v1 = ContractCodeEntryV1Anon.decode(stream)
                        ContractCodeEntryExtV1(v1)
                    }

                    else -> throw IllegalArgumentException("unknown type: $type")
                }
            }
        }

        /**
         * ContractCodeEntryV1Anon's original definition in the XDR file is:
         * ```
         * struct
        {
        ExtensionPoint ext;
        ContractCodeCostInputs costInputs;
        }
         * ```
         */
        data class ContractCodeEntryV1Anon(
            val ext: ExtensionPoint,
            val costInputs: ContractCodeCostInputs,
        ) : XdrElement {
            override fun encode(stream: XdrOutputStream) {
                ext.encode(stream)
                costInputs.encode(stream)
            }

            companion object : XdrElementDecoder<ContractCodeEntryV1Anon> {
                override fun decode(stream: XdrInputStream): ContractCodeEntryV1Anon {
                    val ext = ExtensionPoint.decode(stream)
                    val costInputs = ContractCodeCostInputs.decode(stream)
                    return ContractCodeEntryV1Anon(
                        ext,
                        costInputs,
                    )
                }
            }

        }
    }
}
