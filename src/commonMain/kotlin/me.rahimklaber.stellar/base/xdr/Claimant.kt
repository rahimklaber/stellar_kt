// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package me.rahimklaber.stellar.base.xdr


/**
 * Claimant's original definition in the XDR file is:
 * ```
 * union Claimant switch (ClaimantType type)
{
case CLAIMANT_TYPE_V0:
struct
{
AccountID destination;    // The account that can use this condition
ClaimPredicate predicate; // Claimable if predicate is true
} v0;
};
 * ```
 */
sealed class Claimant(val type: ClaimantType) : XdrElement {
    fun v0OrNull(): V0? = if (this is V0) this else null
    data class V0(
        val v0: ClaimantV0Anon,
    ) : Claimant(ClaimantType.CLAIMANT_TYPE_V0) {
        override fun encode(stream: XdrOutputStream) {
            type.encode(stream)
            v0.encode(stream)
        }
    }

    companion object : XdrElementDecoder<Claimant> {
        override fun decode(stream: XdrInputStream): Claimant {
            return when (val type = ClaimantType.decode(stream)) {
                ClaimantType.CLAIMANT_TYPE_V0 -> {
                    val v0 = ClaimantV0Anon.decode(stream)
                    V0(v0)
                }

                else -> throw IllegalArgumentException("unknown type: $type")
            }
        }
    }

    /**
     * ClaimantV0Anon's original definition in the XDR file is:
     * ```
     * struct
    {
    AccountID destination;    // The account that can use this condition
    ClaimPredicate predicate; // Claimable if predicate is true
    }
     * ```
     */
    data class ClaimantV0Anon(
        val destination: AccountID,
        val predicate: ClaimPredicate,
    ) : XdrElement {
        override fun encode(stream: XdrOutputStream) {
            destination.encode(stream)
            predicate.encode(stream)
        }

        companion object : XdrElementDecoder<ClaimantV0Anon> {
            override fun decode(stream: XdrInputStream): ClaimantV0Anon {
                val destination = AccountID.decode(stream)
                val predicate = ClaimPredicate.decode(stream)
                return ClaimantV0Anon(
                    destination,
                    predicate,
                )
            }
        }

    }
}
